IF NOT EXISTS (SELECT UpdateVersion from {databaseOwner}[{objectQualifier}EasyDNNNewsUpdate] WHERE UpdateVersion = '06.02.00')
BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}EasyDNNNewsUpdate]([UpdateVersion],[Finished]) VALUES(N'06.02.00',0)
END
GO

/*** category menu articles or events count selection ***/
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsMenuSettings' and column_name = 'CountArticles')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsMenuSettings] ADD CountArticles BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsMenuSettings_CountArticles DEFAULT(1) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsMenuSettings' and column_name = 'CountEvents')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsMenuSettings] ADD CountEvents BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsMenuSettings_CountEvents DEFAULT(1) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsMenuSettings' and column_name = 'CountEventsLimitByDays')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsMenuSettings] ADD CountEventsLimitByDays INT NULL
	BEGIN TRY
		EXEC dbo.sp_executesql @statement = N'UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsMenuSettings] SET [CountEventsLimitByDays] = 0';
	END TRY
	BEGIN CATCH
	END CATCH
END
GO
/*** end ***/

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'ShowArticles')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD ShowArticles BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_ShowArticles DEFAULT(1) NOT NULL;
	BEGIN TRY
		EXEC dbo.sp_executesql @statement = N'UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] SET [ShowArticles] = 0 WHERE [ShowOnlyEvents] = 1; UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] SET [ShowOnlyEvents] = 1, [PastEventsLimit] = ''Limit'', [PastEventsLimitDays] = 0 WHERE [ShowOnlyEvents] = 0;';
	END TRY
	BEGIN CATCH
	END CATCH
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'ShowArticles')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD ShowArticles BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_ShowArticles DEFAULT(1) NOT NULL;
	BEGIN TRY
		EXEC dbo.sp_executesql @statement = N'UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] SET [ShowArticles] = 0 WHERE [ShowOnlyEvents] = 1; UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] SET [ShowOnlyEvents] = 1, [PastEventsLimit] = ''Limit'', [PastEventsLimitDays] = 0 WHERE [ShowOnlyEvents] = 0;';
	END TRY
	BEGIN CATCH
	END CATCH
END
GO
IF EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'Title')
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}EasyDNNNews] WHERE Title IS NULL OR LEN([Title]) = 0
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ALTER COLUMN Title nvarchar(800) NOT NULL;
	BEGIN TRY
		ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD CONSTRAINT [chk_{objectQualifier}EasyDNNNews_Title_Lenght] CHECK (LEN([Title]) > 0)
	END TRY
	BEGIN CATCH
	END CATCH
END
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData](
	[ArticleID] [int] NOT NULL,
	[RecurringID] [int] NOT NULL,
	[StartDateTime] [datetime] NOT NULL,
	[EndDateTime] [datetime] NOT NULL,
	CONSTRAINT [PK_{objectQualifier}EasyDNNNewsEventsRecurringData] PRIMARY KEY CLUSTERED ([ArticleID] ASC, [RecurringID] ASC)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]') AND name = N'IX_{objectQualifier}EasyDNNNewsEventsRecurringData_EndDateTime')
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EasyDNNNewsEventsRecurringData_EndDateTime] ON {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] 
([EndDateTime] ASC) WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]') AND name = N'IX_{objectQualifier}EasyDNNNewsEventsRecurringData_StartDateTime')
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}EasyDNNNewsEventsRecurringData_StartDateTime] ON {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] 
([StartDateTime] ASC)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[chk_{objectQualifier}StartDateTimeEndDateTime]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]  WITH CHECK ADD  CONSTRAINT [chk_{objectQualifier}StartDateTimeEndDateTime] CHECK  (([EndDateTime]>=[StartDateTime]))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[chk_{objectQualifier}StartDateTimeEndDateTime]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] CHECK CONSTRAINT [chk_{objectQualifier}StartDateTimeEndDateTime]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsRecurringData_EasyDNNNewsEventsData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsRecurringData_EasyDNNNewsEventsData] FOREIGN KEY([ArticleID])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ([ArticleID]) ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNNewsEventsRecurringData_EasyDNNNewsEventsData]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNNewsEventsRecurringData_EasyDNNNewsEventsData]
GO


IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'Recurring')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD Recurring BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsEventsData_Recurring DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringHour')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringHour INT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringDay')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringDay INT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringWeek')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringWeek INT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringWeekDays')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringWeekDays NVARCHAR(20) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringMonthType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringMonthType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringMonthDay')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringMonthDay TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringMonthDayOfWeek')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringMonthDayOfWeek TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringMonth')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringMonth INT NULL
END
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYearType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYearType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYearMonthDay')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYearMonthDay TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYearDayOfWeek')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYearDayOfWeek TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYearMonth')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYearMonth TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringYear')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringYear INT NULL
END
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringEndType')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringEndType TINYINT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'RecurringEndByDate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD RecurringEndByDate DATETIME NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'EndsAfterOccurrences')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD EndsAfterOccurrences INT NULL
END
GO

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'UpcomingOccurrences')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD UpcomingOccurrences INT NULL
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCalendarEventsArchive]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCalendarEventsArchive]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]
(
	@ArticleID int,
	@FieldsTemplateID int,
	@LocaleCode	nvarchar(20) = NULL,
	@ShowHiddenFields BIT
)
AS
SET NOCOUNT ON;    

IF @LocaleCode IS NULL
BEGIN
	SELECT fv.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],
		cf.[IconURL],cf.[ACode],cf.[DisplayFormat],fv.[RText],fv.[Decimal],fv.[Int],fv.[Bit],NULL AS [FieldElementID],fv.[Text],gt.[Position],NULL AS [MEPosition]
	FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
	 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] as fv ON cf.[CustomFieldID] = fv.[CustomFieldID]
	  WHERE cf.[IsPublished] = ''1'' AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields) AND gt.[FieldsTemplateID] = @FieldsTemplateID AND fv.[ArticleID] = @ArticleID
	UNION ALL
	SELECT fms.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],NULL AS [ACode],NULL AS [DisplayFormat],
	 NULL as [RText], NULL AS [Decimal],NULL AS [Int],NULL AS [Bit],fme.[FieldElementID],fme.[Text],gt.[Position],fme.[Position] AS [MEPosition]
	FROM {databaseOwner}[{objectQualifier}EasyDNNfields] as cf INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
	 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] as fme ON cf.[CustomFieldID] = fme.[CustomFieldID]
	  LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] as fms ON cf.[CustomFieldID] = fms.[CustomFieldID] AND fme.[FieldElementID] = fms.[FieldElementID] AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
	   WHERE cf.[IsPublished] = ''1'' AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields) AND gt.[FieldsTemplateID] = @FieldsTemplateID AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
	ORDER BY [Position], [MEPosition];
END
ELSE
BEGIN
	;WITH AllValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],
		[IconURL],[ACode],[DisplayFormat],[RText],[Decimal],[Int],[Bit],[FieldElementID],[Text],[Position],[MEPosition])
		AS (
			SELECT fv.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],
				cf.[IconURL],cf.[ACode],cf.[DisplayFormat],fv.[RText],fv.[Decimal],fv.[Int],fv.[Bit],NULL AS [FieldElementID],fv.[Text],gt.[Position],NULL AS [MEPosition]
			FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
			 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] as fv ON cf.[CustomFieldID] = fv.[CustomFieldID]
			  WHERE cf.[IsPublished] = ''1'' AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields) AND gt.[FieldsTemplateID] = @FieldsTemplateID AND fv.[ArticleID] = @ArticleID
			UNION ALL
			SELECT fms.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],NULL AS [ACode],NULL AS [DisplayFormat],
			 NULL as [RText], NULL AS [Decimal],NULL AS [Int],NULL AS [Bit],fme.[FieldElementID],fme.[Text],gt.[Position],fme.[Position] AS [MEPosition]
			FROM {databaseOwner}[{objectQualifier}EasyDNNfields] as cf INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
			 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] as fme ON cf.[CustomFieldID] = fme.[CustomFieldID]
			  LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] as fms ON cf.[CustomFieldID] = fms.[CustomFieldID] AND fms.[FieldElementID] = fme.[FieldElementID] AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
			   WHERE cf.[IsPublished] = ''1'' AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields) AND gt.[FieldsTemplateID] = @FieldsTemplateID AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
	),
	LocalizedSingleValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],
		[IconURL],[ACode],[DisplayFormat],[RText],[Decimal],[Int],[Bit],[FieldElementID],[Text],[Position],[MEPosition]) AS(
		SELECT av.[ArticleID], av.[CustomFieldID],av.[ControlTypeID],av.[Token],av.[ShowLabel],av.[LabelValue],av.[LabelHelp],av.[IsParent],
		av.[IconURL],av.[ACode],av.[DisplayFormat],av.[RText],av.[Decimal],av.[Int],av.[Bit],av.[FieldElementID],fvl.[Text],av.[Position],av.[MEPosition]
		 FROM AllValues as av INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValuesLocalization] AS fvl ON av.CustomFieldID = fvl.CustomFieldID AND fvl.ArticleID = @ArticleID AND fvl.LocaleCode = @LocaleCode AND av.[Text] IS NOT NULL
		  WHERE (av.ControlTypeID = 1 OR av.ControlTypeID = 2)
	),
	LocalizedMultiValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],
		[IconURL],[ACode],[DisplayFormat],[RText],[Decimal],[Int],[Bit],[FieldElementID],[Text],[Position],[MEPosition]) AS(
		SELECT av.[ArticleID], av.[CustomFieldID],av.[ControlTypeID],av.[Token],av.[ShowLabel],av.[LabelValue],av.[LabelHelp],av.[IsParent],
			av.[IconURL],av.[ACode],av.[DisplayFormat],av.[RText],av.[Decimal],av.[Int],av.[Bit],av.[FieldElementID],fmel.[Text],av.[Position],av.[MEPosition]
		FROM AllValues as av
		 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElementsLocalization] AS fmel ON av.FieldElementID = fmel.FieldElementID AND fmel.LocaleCode = @LocaleCode AND av.[Text] IS NOT NULL --WHERE (av.ControlTypeID <> 1 OR av.ControlTypeID <> 2)
	),
	CombinedValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],
		[IconURL],[ACode],[DisplayFormat],[RText],[Decimal],[Int],[Bit],[FieldElementID],[Text],[Position],[MEPosition]) AS(
		--u zadnjem redu ovo field element is nul null to je zato jer se prilikom joina maknul,.. jer se pretpostavlja da je null
		SELECT * FROM LocalizedSingleValues
		UNION ALL
		SELECT * FROM LocalizedMultiValues
		UNION ALL
		SELECT * FROM AllValues WHERE (CustomFieldID NOT IN (SELECT CustomFieldID FROM LocalizedSingleValues)) AND ((FieldElementID NOT IN (SELECT FieldElementID FROM LocalizedMultiValues)) OR FieldElementID IS NULL)
	),
	LocalizedLabelsAndFinalize ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],
		[IconURL],[ACode],[DisplayFormat],[RText],[Decimal],[Int],[Bit],[FieldElementID],[Text],[Position],[MEPosition]) AS(
		SELECT cv.[ArticleID],cv.[CustomFieldID],cv.[ControlTypeID],cv.[Token],cv.[ShowLabel],fl.[LabelValue],fl.[LabelHelp],cv.[IsParent],
			cv.[IconURL],cv.[ACode],cv.[DisplayFormat],cv.[RText],cv.[Decimal],cv.[Int],cv.[Bit],cv.[FieldElementID],cv.[Text],cv.[Position],cv.[MEPosition]
		FROM CombinedValues as cv
		 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsLocalization] AS fl ON cv.CustomFieldID = fl.CustomFieldID AND fl.LocaleCode = @LocaleCode
	)
	SELECT * FROM LocalizedLabelsAndFinalize
	UNION ALL
	SELECT * FROM CombinedValues WHERE CustomFieldID NOT IN (SELECT CustomFieldID FROM LocalizedLabelsAndFinalize)  ORDER BY [Position], [MEPosition];
END' 
END
GO


/*** remove old procedures ***/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplay]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplay]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageing]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageing]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]
GO
/*** end ***/

/*** remove old calendar procedures ***/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarAll]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCalendarOnlyNews]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetUpcomingEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetUpcomingEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayByDateWithEventsRange]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForListDisplayByDateWithEventsRange]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingDateWithEventsRange]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsCountForPageingDateWithEventsRange]
GO
/*** end ***/

/*** remove old calendar procedures ***/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCategoryMenu]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetItemsForCategoryMenu]
GO
/*** end ***/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarArchive]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarArchive]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetAllContent]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetAllContent]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetArticles]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetArticles]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsMenuGetCategories]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsMenuGetCategories]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContent]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContent]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContentCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContentCount]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetArticles]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetArticles]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetArticlesCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetArticlesCount]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetEventsCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetEventsCount]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetEventsCount]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetEventsCount]
	@ViewType TINYINT = 0, -- 0 - View, 1 - Editor
	@PortalID INT, -- current Portal
	@ModuleID INT, -- current Module, portal sharing isto sadrzi dobre kategorije, auto add i setingsi su snimljeni kod tog modula
	@UserID INT,
	@DateRangeType TINYINT = 0, -- ako je 0 znaci da se ne gleda start date
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	/* od tud ide filter */
	@OnlyOneCategory INT = NULL, -- used for category menu or vhen need to filter by one category
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1, -- gleda se filtriranje autora po modulu ili portalu
	@FilterByAuthor INT = 0,
	@FilterByGroupID INT = 0,
	@FilterByTags BIT = 0,
	/*@FilterByArticles BIT = 0,*/ -- ovoga nema tu !!
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@EditOnlyAsOwner BIT = 0, -- news settings
	@UserCanApprove BIT = 0, -- news settings
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,	
	@FirstOrderBy NVARCHAR(20) = '''',--''Featured DESC'', -- featured articles on top	
	@Perm_ViewAllCategores BIT = 0, -- permission settings View all categories
	@Perm_EditAllCategores BIT = 0, -- permission settings Edit all categories
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1, -- 0 All categories, 1 - SELECTion, 2 - AutoAdd
	@PermissionSettingsSource BIT = 0, -- 0 portal, 1 module
	@FillterSettingsSource BIT = 0, -- 0 portal, 1 module
	@StartDate DATETIME = NULL,
	@OuterModuleID INT = 0,
	@HideUnlocalizedItems BIT = 0
AS
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @EditPermission TINYINT;
SET @EditPermission = 0;
IF @OuterModuleID = 0 AND @FilterByTags = 1
BEGIN
	DECLARE @FilterTagsTable TABLE (TagID INT NOT NULL PRIMARY KEY);
	IF @FillterSettingsSource = 1 -- portal settings
		BEGIN
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
		END
	ELSE
		BEGIN
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID;
		END
END
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());
DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserEditCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can edit based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal

IF @UserID = -1
BEGIN	
	IF @Perm_ViewAllCategores = 1
	BEGIN
		INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END
	ELSE
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
		ELSE -- by module
		BEGIN
		INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID AND rps.RoleID IS NULL;
		END
	END
END
ELSE IF @AdminOrSuperUser = 1
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE
BEGIN
	IF @Perm_ViewAllCategores = 1
	BEGIN
		INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END
	ELSE
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upsc.[CategoryID];
		END
	END
END

IF @OnlyOneCategory IS NOT NULL -- filtrira se po jednoj kategoriji
BEGIN
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories WHERE CategoryID = @OnlyOneCategory;
	INSERT INTO @FiltredByCategories SELECT @OnlyOneCategory;
END
ELSE IF @OuterModuleID <> 0
BEGIN
	IF @CategoryFilterType = 0 -- 0 All categories
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END
	ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter 
		SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @OuterModuleID
			
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID;
	END
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		WITH hierarchy AS(
			SELECT [CategoryID], [ParentCategory]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
			WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID)) AND PortalID = @PortalID
			UNION ALL
			SELECT c.[CategoryID], c.[ParentCategory]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			)
		INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
		INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
	END
END
ELSE
BEGIN
	IF @CategoryFilterType = 0 -- 0 All categories
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END
	ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter 
			SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS pci ON pci.CategoryID = cl.CategoryID AND pci.PortalID = @PortalID
			
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID;
		END
		ELSE -- module
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter 
			SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @ModuleID
			
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID;
		END
	END
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
		BEGIN
			WITH hierarchy AS(
				SELECT [CategoryID], [ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID)) AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID], c.[ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				)
			INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
			INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;			
		END
		ELSE -- module
		BEGIN
			WITH hierarchy AS(
				SELECT [CategoryID], [ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID)) AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID], c.[ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				)
			INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
			INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
		END
	END
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
			IF @FilterByAuthor <> 0
			BEGIN
				SET @FilterAuthorOrAuthors = 1;
				SELECT @FilterByAuthor = UserID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
			END
		END
	END
ELSE
BEGIN
-- ovaj dio odnosi se na filtriranje autora
	IF @OuterModuleID <> 0 AND @ShowAllAuthors = 0 -- filter iu other modula
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID
	END
	ELSE
	BEGIN
		IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0 -- filter glavnog newsa
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			IF @FillterSettingsSource = 1 -- by portal
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai WHERE pai.PortalID = @PortalID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID
			END
			ELSE -- by modul
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID
			END
		END
		ELSE IF @FilterByAuthor <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
		END
		ELSE IF @FilterByGroupID <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID
		END
	END
END

IF @AdminOrSuperUser = 1 OR @Perm_EditAllCategores = 1
BEGIN	
	SET @EditPermission = 1;
END

DECLARE @ArticlesInCategories INT;
SET @ArticlesInCategories = 0;
DECLARE @ArticlesInRolesAndUsers INT;
SET @ArticlesInRolesAndUsers = 0;

IF @IsSocialInstance = 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		SET @ArticlesInCategories =
		(SELECT COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
		WHERE na.PortalID=@PortalID
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
			AND na.HasPermissions = 0
			AND ne.Recurring = 0
			AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
			AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
			AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
		GROUP BY na.ArticleID) AS InnerCount);
		SET @ArticlesInCategories = @ArticlesInCategories +
		(SELECT COUNT(ArticleID) FROM (SELECT na.[ArticleID], nerd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] as nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
			CASE @DateRangeType
			WHEN 2 THEN -- @StartDate min value
				CASE WHEN ne.UpcomingOccurrences > 1
				THEN
					CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
							  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
						THEN 1
						ELSE 0
					END
				ELSE
					CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
							  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
						THEN 1
						ELSE 0
					END
				END
			WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
				CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
					THEN 1
					ELSE 0
				END
			WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
				CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
					THEN 1
					ELSE 0
				END
			ELSE 0
			END
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
		WHERE na.PortalID=@PortalID
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
			AND na.HasPermissions = 0
			AND ne.Recurring = 1
			AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
			AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
		GROUP BY na.ArticleID, nerd.RecurringID) AS InnerCount);
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND na.HasPermissions = 1
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS final
	END
	ELSE
	BEGIN
		SET @ArticlesInCategories =
		(SELECT COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
		WHERE na.PortalID=@PortalID
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
			AND na.HasPermissions = 0
			AND na.HideDefaultLocale = 0
			AND ne.Recurring = 0
			AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
			AND ((@Featured = 0) OR (@Featured = 1 AND na.Featured = 1))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
			AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
		GROUP BY na.ArticleID) AS InnerCount);
		SET @ArticlesInCategories = @ArticlesInCategories +
		(SELECT COUNT(ArticleID) FROM (SELECT na.[ArticleID], nerd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] as nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
			CASE @DateRangeType
				WHEN 2 THEN -- @StartDate min value
					CASE WHEN ne.UpcomingOccurrences > 1
					THEN
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					ELSE
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					END
				WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
					CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
					CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				ELSE 0
				END
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
		WHERE na.PortalID=@PortalID
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
			AND na.HasPermissions = 0
			AND na.HideDefaultLocale = 0
			AND ne.Recurring = 1
			AND ((@Featured = 0) OR (@Featured = 1 AND na.Featured = 1))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
			AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
		GROUP BY na.ArticleID, nerd.RecurringID) AS InnerCount);
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND ne.Recurring = 0
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND ((@Featured = 0) OR (@Featured = 1 AND na.Featured = 1))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND ne.Recurring = 0
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND ((@Featured = 0) OR (@Featured = 1 AND na.Featured = 1))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			GROUP BY na.ArticleID
		) AS final
	END
END
ELSE IF @FilterBySocialGroup = 1
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		SELECT @ArticlesInCategories = COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
		WHERE na.PortalID=@PortalID
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
			AND na.HasPermissions = 0
			AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
			AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
			AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
		GROUP BY na.ArticleID) AS COUNTTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND na.HasPermissions = 1
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
				AND((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS final
	END
	ELSE
	BEGIN
		SELECT @ArticlesInCategories = COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
		WHERE na.PortalID=@PortalID
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1)AND (na.Active=1 OR na.UserID=@UserID)))
			AND na.HasPermissions = 0
			AND na.HideDefaultLocale = 0
			AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
			AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
			AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
		GROUP BY na.ArticleID) AS COUNTTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			    AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
			    AND((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
			    AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			GROUP BY na.ArticleID
		) AS final
	END
END
ELSE IF @FilterByDNNUserID <> 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		SELECT @ArticlesInCategories = COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
		WHERE na.PortalID=@PortalID
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
			AND na.HasPermissions = 0
			AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
			AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
			AND na.UserID = @FilterByDNNUserID
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
		GROUP BY na.ArticleID) AS COUNTTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
			    AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			    AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
			    AND na.UserID = @FilterByDNNUserID
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND na.HasPermissions = 1
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS final
	END
	ELSE
	BEGIN
		SELECT @ArticlesInCategories = COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
		WHERE na.PortalID=@PortalID
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
			AND na.HasPermissions = 0
			AND na.HideDefaultLocale = 0
			AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
			AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
			AND na.UserID = @FilterByDNNUserID
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
		GROUP BY na.ArticleID) AS COUNTTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
			    AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			    AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
			    AND na.UserID = @FilterByDNNUserID
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] from {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
			    AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			    AND na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate
			    AND na.UserID = @FilterByDNNUserID
			    AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			GROUP BY na.ArticleID
		) AS final
	END
END
SELECT @ArticlesInRolesAndUsers + @ArticlesInCategories
     
     ' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetEvents]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetEvents]
	@ViewType TINYINT = 0, -- 0 - View, 1 - Editor
	@PortalID INT, -- current Portal
	@ModuleID INT, -- current Module, portal sharing isto sadrzi dobre kategorije, auto add i setingsi su snimljeni kod tog modula
	@UserID INT,
	@OrderBy NVARCHAR(20) = ''PublishDate DESC'',
	@ItemsFrom INT = 1,
	@ItemsTo INT = 5,
	@DateRangeType TINYINT = 0, -- ako je 0 znaci da se ne gleda start date
	@FromDate DATETIME = NULL, -- ovo ne treba za only events
	@ToDate DATETIME = NULL, -- ovo ne treba za only events
	/* od tud ide filter */
	@OnlyOneCategory INT = NULL, -- used for category menu or vhen need to filter by one category
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1, -- gleda se filtriranje autora po modulu ili portalu
	@FilterByAuthor INT = 0,
	@FilterByGroupID INT = 0,
	@FilterByTags BIT = 0,
	/*@FilterByArticles BIT = 0,*/ -- ovoga nema tu !!
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@EditOnlyAsOwner BIT = 0, -- news settings
	@UserCanApprove BIT = 0, -- news settings
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,	
	@FirstOrderBy NVARCHAR(20) = '''',--''Featured DESC'', -- featured articles on top	
	@Perm_ViewAllCategores BIT = 0, -- permission settings View all categories
	@Perm_EditAllCategores BIT = 0, -- permission settings Edit all categories
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1, -- 0 All categories, 1 - SELECTion, 2 - AutoAdd
	@PermissionSettingsSource BIT = 0, -- 0 portal, 1 module
	@FillterSettingsSource BIT = 0, -- 0 portal, 1 module
	@StartDate DATETIME = NULL,
	@OuterModuleID INT = 0,
	@HideUnlocalizedItems BIT = 0
AS
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @EditPermission TINYINT;
SET @EditPermission = 0;
IF @OuterModuleID = 0 AND @FilterByTags = 1
BEGIN
	DECLARE @FilterTagsTable TABLE (TagID INT NOT NULL PRIMARY KEY);
	IF @FillterSettingsSource = 1 -- portal settings
		BEGIN
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
		END
	ELSE
		BEGIN
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID;
		END
END
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserEditCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can edit based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal

IF @UserID = -1
BEGIN	
	IF @Perm_ViewAllCategores = 1
	BEGIN
		INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END
	ELSE -- SELECTion by permission
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
		ELSE -- by module
		BEGIN
		INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID AND rps.RoleID IS NULL;
		END
	END
END
ELSE IF @AdminOrSuperUser = 1
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE -- registrirani korisnik
BEGIN
	IF @Perm_ViewAllCategores = 1
	BEGIN
		INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END
	ELSE
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upsc.[CategoryID];
		END
	END
END

IF @OnlyOneCategory IS NOT NULL -- filtrira se po jednoj kategoriji
BEGIN
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories WHERE CategoryID = @OnlyOneCategory;
	INSERT INTO @FiltredByCategories SELECT @OnlyOneCategory;
END
ELSE IF @OuterModuleID <> 0
BEGIN
	IF @CategoryFilterType = 0 -- 0 All categories
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END
	ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter 
		SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @OuterModuleID
			
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID;
	END
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		WITH hierarchy AS(
			SELECT [CategoryID], [ParentCategory]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
			WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID)) AND PortalID = @PortalID
			UNION ALL
			SELECT c.[CategoryID], c.[ParentCategory]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
			)
		INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
		INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
	END
END
ELSE
BEGIN
	IF @CategoryFilterType = 0 -- 0 All categories
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END
	ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter 
			SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS pci ON pci.CategoryID = cl.CategoryID AND pci.PortalID = @PortalID
			
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID;
		END
		ELSE -- module
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter 
			SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @ModuleID
			
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID;
		END
	END
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
		BEGIN
			WITH hierarchy AS(
				SELECT [CategoryID], [ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID)) AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID], c.[ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				)
			INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
			INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;			
		END
		ELSE -- module
		BEGIN
			WITH hierarchy AS(
				SELECT [CategoryID], [ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID)) AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID], c.[ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				)
			INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
			INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
		END
	END
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
			IF @FilterByAuthor <> 0
			BEGIN
				SET @FilterAuthorOrAuthors = 1;
				SELECT @FilterByAuthor = UserID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
			END
		END
	END
ELSE
BEGIN
-- ovaj dio odnosi se na filtriranje autora
	IF @OuterModuleID <> 0 AND @ShowAllAuthors = 0 -- filter iu other modula
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID
	END
	ELSE
	BEGIN
		IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0 -- filter glavnog newsa
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			IF @FillterSettingsSource = 1 -- by portal
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai WHERE pai.PortalID = @PortalID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID
			END
			ELSE -- by modul
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID
			END
		END
		ELSE IF @FilterByAuthor <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
		END
		ELSE IF @FilterByGroupID <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID
		END
	END
END
-- kategorije sa edit pravima
IF @AdminOrSuperUser = 1 OR @Perm_EditAllCategores = 1
BEGIN	
	INSERT INTO @UserEditCategories SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	SET @EditPermission = 1;
END
ELSE
BEGIN
	IF @UserID = -1
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
		ELSE -- by module
		BEGIN
		INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.RoleID IS NULL AND rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID;
		END
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upatc.[CategoryID];
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upatc.[CategoryID];
		END	
	END
	IF EXISTS(SELECT * FROM @UserEditCategories) BEGIN SET @EditPermission = 2; END
END

DECLARE @LocalizedCategories TABLE (ID INT NOT NULL PRIMARY KEY, Name NVARCHAR(200), Position INT, CategoryURL NVARCHAR(1500));
IF @LocaleCode IS NOT NULL
BEGIN
	WITH LocCategories(ID, Name, Position, CategoryURL) AS (
		SELECT Cat.CategoryID AS ID, cl.Title AS Name, Cat.Position, Cat.CategoryURL FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = Cat.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON uvc.CategoryID = cl.CategoryID WHERE Cat.PortalID = @PortalID AND cl.LocaleCode = @LocaleCode
	),
	NotLocCategories(ID, Name, Position, CategoryURL) AS (
		SELECT Cat.CategoryID AS ID, Cat.CategoryName AS Name, Cat.Position, Cat.CategoryURL FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = Cat.CategoryID WHERE Cat.PortalID = @PortalID AND Cat.CategoryID NOT IN (SELECT ID FROM LocCategories)
	)
	INSERT INTO @LocalizedCategories SELECT ID, Name, Position, CategoryURL FROM (SELECT ID, Name, Position, CategoryURL FROM LocCategories UNION ALL SELECT ID, Name, Position, CategoryURL FROM NotLocCategories) AS ArticleCategories
END
ELSE
BEGIN
	INSERT INTO @LocalizedCategories SELECT Cat.CategoryID AS ID, Cat.CategoryName AS Name, Cat.Position, Cat.CategoryURL FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = cat.CategoryID WHERE Cat.PortalID = @PortalID
END

IF @IsSocialInstance = 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID,StartDate,RecurringID) AS(
		 SELECT TOP (@ItemsTo - @ItemsFrom + 1) ArticleID,StartDate,RecurringID FROM (
		 SELECT *, ROW_NUMBER() OVER (ORDER BY
			 CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC, 
			 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
			 CASE WHEN @OrderBy =''StartDate ASC'' THEN [StartDate] END,
			 CASE WHEN @OrderBy =''StartDate DESC'' THEN [StartDate] END DESC) AS Kulike
		 FROM
			(SELECT n.ArticleID,n.Featured,n.PublishDate,n.NumberOfViews,n.RatingValue,n.DateAdded,n.ExpireDate,n.LastModified,n.NumberOfComments,n.Title,
				CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END AS ''StartDate'',
				CASE WHEN ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID''
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ned.ArticleID = nerd.ArticleID AND ned.Recurring = 1 AND 1 =
			CASE @DateRangeType
				WHEN 2 THEN -- @StartDate min value
					CASE WHEN ned.UpcomingOccurrences > 1
					THEN
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(ned.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					ELSE
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					END
				WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
					CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
					CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				ELSE 0
				END
			 WHERE n.ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
					LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
				WHERE na.PortalID=@PortalID
					AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
					AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] as nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
					CASE @DateRangeType
					WHEN 2 THEN -- @StartDate min value
						CASE WHEN ne.UpcomingOccurrences > 1
						THEN
							CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
									  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
								THEN 1
								ELSE 0
							END
						ELSE
							CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
									  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
								THEN 1
								ELSE 0
							END
						END
					WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
						CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
							THEN 1
							ELSE 0
						END
					WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
						CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
							THEN 1
							ELSE 0
						END
					ELSE 0
					END
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
					LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
				WHERE na.PortalID=@PortalID
					AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 1
					AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
					LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
				WHERE na.PortalID=@PortalID
					AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
						AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
					))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
					AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
					LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
				WHERE na.PortalID=@PortalID
					AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
						AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
					AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))	 
					AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
					)
			) AS innerAllResult ) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
				CASE WHEN @OrderBy =''StartDate ASC'' THEN StartDate END,
				CASE WHEN @OrderBy =''StartDate DESC'' THEN StartDate END DESC
		),
		FinalLocalizedArticleIDsSet (ArticleID,RecurringID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ncl.ArticleID,fais.RecurringID,ncl.Title,ncl.SubTitle,ncl.Summary,ncl.Article,ncl.DetailTypeData,ncl.clTitleLink AS TitleLink ,ncl.MetaDecription,ncl.MetaKeywords,ncl.MainImageTitle,ncl.MainImageDescription
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl INNER JOIN FinalArticleIDsSet AS fais ON ncl.ArticleID = fais.ArticleID AND LocaleCode = @LocaleCode
		)
		SELECT *,
			CASE @EditPermission 
				WHEN 0 THEN 0
				WHEN 1 THEN 1
				WHEN 2 THEN
				CASE @EditOnlyAsOwner
					WHEN 0 THEN			
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END
						END  			
					WHEN 1 THEN
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END 
						END
				END
				WHEN 3 THEN
					CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
						CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
							THEN 1
							ELSE 0
							END
						END 
			END AS ''CanEdit'',
			(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
			 CASE Result.Active
				WHEN 1 THEN 0
				WHEN 0 THEN 1
			 END AS ''Published'',
			 CASE @UserCanApprove
				WHEN 0 THEN 0
				WHEN 1 THEN
					CASE Result.Approved
					 WHEN 1 THEN 0
					 WHEN 0 THEN
						 CASE Result.Active
							WHEN 1 THEN 1
							WHEN 0 THEN 0
						END
					END
			 END AS ''Approve''
			 FROM (
				SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],
					 CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END AS ''StartDate'',
					 CASE WHEN ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID'',
					 n.[CFGroupeID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
					INNER JOIN FinalArticleIDsSet AS fais ON ned.ArticleID = fais.ArticleID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON fais.ArticleID = nerd.ArticleID AND nerd.RecurringID = fais.RecurringID
					WHERE n.ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				UNION ALL
				SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription],
					 CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END AS ''StartDate'',
					 CASE WHEN ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID'',
					 n.[CFGroupeID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON fla.ArticleID = ned.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON fla.ArticleID = nerd.ArticleID AND nerd.RecurringID = fla.RecurringID
				) As Result		 
			ORDER BY
			 CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
			 CASE WHEN @OrderBy =''StartDate ASC'' THEN StartDate END,
			 CASE WHEN @OrderBy =''StartDate DESC'' THEN StartDate END DESC;
	END
	ELSE
	BEGIN
		SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		 FROM (
		 SELECT *, ROW_NUMBER() OVER (ORDER BY
			 CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC, 
			 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
			 CASE WHEN @OrderBy =''StartDate ASC'' THEN [StartDate] END,
			 CASE WHEN @OrderBy =''StartDate DESC'' THEN [StartDate] END DESC) AS Kulike
		 FROM (
		 
		 SELECT
		 n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],
		 CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END AS ''StartDate'',
		 CASE WHEN ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID''
		 ,n.[CFGroupeID]
		 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
		 LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ned.ArticleID = nerd.ArticleID AND ned.ArticleID IS NOT NULL AND ned.Recurring = 1 AND 1 =
		 CASE @DateRangeType
				WHEN 2 THEN -- @StartDate min value
					CASE WHEN ned.UpcomingOccurrences > 1
					THEN
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(ned.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					ELSE
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					END
				WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
					CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
					CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				ELSE 0
				END
		  WHERE n.ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] as nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
				CASE @DateRangeType
				WHEN 2 THEN -- @StartDate min value
					CASE WHEN ne.UpcomingOccurrences > 1
					THEN
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					ELSE
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					END
				WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
					CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
					CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				ELSE 0
				END
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 1
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			UNION ALL
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND (@DateRangeType = 0 OR ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate)))) 
				AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))	 
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			)
		 ) AS innerAllResult ) AS  Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
			CASE WHEN @OrderBy =''StartDate ASC'' THEN StartDate END,
			CASE WHEN @OrderBy =''StartDate DESC'' THEN StartDate END DESC;
	END
END
ELSE IF @FilterBySocialGroup = 1
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID,StartDate) AS(
			SELECT TOP (@ItemsTo - @ItemsFrom + 1) ArticleID, StartDate FROM (SELECT n.*, ned.[StartDate], ROW_NUMBER() OVER (ORDER BY 
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
				CASE WHEN @OrderBy =''StartDate ASC'' THEN ned.[StartDate] END,
				CASE WHEN @OrderBy =''StartDate DESC'' THEN ned.[StartDate] END DESC) AS Kulike
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID WHERE n.ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
					LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID	
				WHERE na.PortalID=@PortalID
					AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND (
						(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
					) 
					AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
					AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
					LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
				WHERE na.PortalID=@PortalID
					AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
						AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
					))
					AND na.HasPermissions = 1
					AND (
						(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
					) 
					AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
					AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
					LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
				WHERE na.PortalID=@PortalID
					AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
						))
					AND na.HasPermissions = 1
					AND (
						(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
					) 
					AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
					AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
					)
			) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
				CASE WHEN @OrderBy =''StartDate ASC'' THEN StartDate END,
				CASE WHEN @OrderBy =''StartDate DESC'' THEN StartDate END DESC
			),
			FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
				SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
			)
			SELECT *,
				CASE @EditPermission 
					WHEN 0 THEN 0
					WHEN 1 THEN 1
					WHEN 2 THEN
					CASE @EditOnlyAsOwner
						WHEN 0 THEN			
							CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
								THEN 1
								ELSE
									CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
									THEN 1
									ELSE
										CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
											THEN 1
											ELSE 0
										END
									END
							END  			
						WHEN 1 THEN
							CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
								THEN 1
								ELSE
									CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
									THEN 1
									ELSE
										CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
											THEN 1
											ELSE 0
										END
									END 
							END
					END
					WHEN 3 THEN
						CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
							CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
								THEN 1
								ELSE 0
								END
							END 
				END AS ''CanEdit'',
				(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
				 CASE Result.Active
					WHEN 1 THEN 0
					WHEN 0 THEN 1
				 END AS ''Published'',
				 CASE @UserCanApprove
					WHEN 0 THEN 0
					WHEN 1 THEN
						CASE Result.Approved
						 WHEN 1 THEN 0
						 WHEN 0 THEN
							 CASE Result.Active
								WHEN 1 THEN 1
								WHEN 0 THEN 0
							END
						END
				 END AS ''Approve''
				 FROM (
					SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
						,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
						,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
						,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
						,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
						,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription], ned.[StartDate],NULL AS ''RecurringID'',n.[CFGroupeID]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID WHERE n.ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
					UNION ALL
					SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
						,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
						,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
						,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
						,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
						,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription], ned.[StartDate],NULL AS ''RecurringID'',n.[CFGroupeID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON fla.ArticleID = ned.ArticleID) As Result		 
				ORDER BY
					CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
					CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
					CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
					CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
					CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
					CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
					CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
					CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
					CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
					CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
					CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
					CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
					CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
					CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
					CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
					CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
					CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
					CASE WHEN @OrderBy =''StartDate ASC'' THEN StartDate END,
					CASE WHEN @OrderBy =''StartDate DESC'' THEN StartDate END DESC;
	END
	ELSE
	BEGIN
		SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		FROM (SELECT
		n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],
		 ned.[StartDate],NULL AS ''RecurringID'',n.[CFGroupeID], ROW_NUMBER() OVER (ORDER BY 
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
		CASE WHEN @OrderBy =''StartDate ASC'' THEN ned.[StartDate] END,
		CASE WHEN @OrderBy =''StartDate DESC'' THEN ned.[StartDate] END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID WHERE n.ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND (
					(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
				) 
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			UNION ALL
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND (
					(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
				) 
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND (
					(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
				) 
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			)
		 ) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
		 CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
		 CASE WHEN @OrderBy =''StartDate ASC'' THEN StartDate END,
		 CASE WHEN @OrderBy =''StartDate DESC'' THEN StartDate END DESC;
	END
END
ELSE IF @FilterByDNNUserID <> 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID,StartDate) AS(
			SELECT TOP (@ItemsTo - @ItemsFrom + 1) ArticleID, StartDate FROM (SELECT n.*, ned.[StartDate], ROW_NUMBER() OVER (ORDER BY 
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
				CASE WHEN @OrderBy =''StartDate ASC'' THEN ned.[StartDate] END,
				CASE WHEN @OrderBy =''StartDate DESC'' THEN ned.[StartDate] END DESC) AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID WHERE n.ArticleID IN(
					SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
						INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
						LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
						LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
						LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
					WHERE na.PortalID=@PortalID
						AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
						AND na.HasPermissions = 0
						AND (
							(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
						) 
						AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
						AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
						AND na.UserID = @FilterByDNNUserID
						AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
						AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
					UNION ALL
					SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
						INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
						LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
						LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
						LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
					WHERE na.PortalID=@PortalID
						AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
							AND aup.Show = 1  AND ((@UserCanApprove = 1) OR (na.Approved=1))AND (na.Active=1 OR na.UserID=@UserID)
						))
						AND na.HasPermissions = 1
						AND (
							(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
						) 
						AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
						AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
						AND na.UserID = @FilterByDNNUserID
						AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
						AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
					UNION
					SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
						INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
						LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
						LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
						LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
					WHERE na.PortalID=@PortalID
						AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
							AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
						))
						AND na.HasPermissions = 1
						AND (
							(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
						) 
						AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
						AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
						AND na.UserID = @FilterByDNNUserID
						AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
						AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				)
			 ) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
				CASE WHEN @OrderBy =''StartDate ASC'' THEN StartDate END,
				CASE WHEN @OrderBy =''StartDate DESC'' THEN StartDate END DESC
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT *,
			CASE @EditPermission 
				WHEN 0 THEN 0
				WHEN 1 THEN 1
				WHEN 2 THEN
				CASE @EditOnlyAsOwner
					WHEN 0 THEN			
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END
						END  			
					WHEN 1 THEN
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END 
						END
				END
				WHEN 3 THEN
					CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
						CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
							THEN 1
							ELSE 0
							END
						END 
			END AS ''CanEdit'',
			(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
			 CASE Result.Active
				WHEN 1 THEN 0
				WHEN 0 THEN 1
			 END AS ''Published'',
			 CASE @UserCanApprove
				WHEN 0 THEN 0
				WHEN 1 THEN
					CASE Result.Approved
					 WHEN 1 THEN 0
					 WHEN 0 THEN
						 CASE Result.Active
							WHEN 1 THEN 1
							WHEN 0 THEN 0
						END
					END
			 END AS ''Approve''
			 FROM (
				SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription], ned.[StartDate],NULL AS ''RecurringID'',n.[CFGroupeID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID WHERE n.ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				UNION ALL
				SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription], ned.[StartDate],NULL AS ''RecurringID'',n.[CFGroupeID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON fla.ArticleID = ned.ArticleID) As Result		 
			ORDER BY
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
				CASE WHEN @OrderBy =''StartDate ASC'' THEN StartDate END,
				CASE WHEN @OrderBy =''StartDate DESC'' THEN StartDate END DESC;
	END
	ELSE
	BEGIN
		SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		FROM (SELECT
		n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],
		 ned.[StartDate],NULL AS ''RecurringID'',n.[CFGroupeID], ROW_NUMBER() OVER (ORDER BY 
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
		CASE WHEN @OrderBy =''StartDate ASC'' THEN ned.[StartDate] END,
		CASE WHEN @OrderBy =''StartDate DESC'' THEN ned.[StartDate] END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID WHERE n.ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND (
					(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
				) 
				AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			UNION ALL
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND (
					(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
				) 
				AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND (
					(@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))  
				) 
				AND((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			)
		 ) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			 CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC,
			 CASE WHEN @OrderBy =''StartDate ASC'' THEN StartDate END,
			 CASE WHEN @OrderBy =''StartDate DESC'' THEN StartDate END DESC;
	END
END' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetArticlesCount]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetArticlesCount]
	@ViewType TINYINT = 0, -- 0 - View, 1 - Editor
	@PortalID INT, -- current Portal
	@ModuleID INT, -- current Module, portal sharing isto sadrzi dobre kategorije, auto add i setingsi su snimljeni kod tog modula
	@UserID INT,
	@DateRange BIT = 0,
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	/* od tud ide filter */
	@OnlyOneCategory INT = 0, -- used for category menu or vhen need to filter by one category
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1, -- gleda se filtriranje autora po modulu ili portalu
	@FilterByAuthor INT = 0, -- ako se selektiran jedan autor
	@FilterByGroupID INT = 0, -- ako je selektirana grupa
	@FilterByTags BIT = 0,
	@FilterByArticles BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@EditOnlyAsOwner BIT = 0, -- news settings
	@UserCanApprove BIT = 0, -- news settings
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,	
	@FirstOrderBy NVARCHAR(20) = '''',--''Featured DESC'', -- featured articles on top	
	@Perm_ViewAllCategores BIT = 0, -- permission settings View all categories
	@Perm_EditAllCategores BIT = 0, -- permission settings Edit all categories
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1, -- 0 All categories, 1 - SELECTion, 2 - AutoAdd
	@PermissionSettingsSource BIT = 1, -- 1 portal, 0 module
	@FillterSettingsSource BIT = 1, -- 1 portal, 0 module
	@OuterModuleID INT = 0,
	@HideUnlocalizedItems BIT = 0,
	@NewsFilterCategories NVARCHAR(1000) = '''',
	@NewsFilterAuthors NVARCHAR(1000) = '''',
	@NewsFilterGroups NVARCHAR(1000) = ''''
AS
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @EditPermission TINYINT;
SET @EditPermission = 0;

IF @NewsFilterCategories = ''''
BEGIN
	IF @OuterModuleID = 0 AND @FilterByArticles = 1
	BEGIN
		DECLARE @FilterArticlesTable TABLE (ArticleID INT NOT NULL PRIMARY KEY);
		IF @FillterSettingsSource = 1 -- portal settings
			BEGIN
				INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByArticles] WHERE FilterPortalID = @PortalID;
			END
		ELSE
			BEGIN
				INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByArticles] WHERE FilterModuleID = @ModuleID;
			END
	END
	-- temp TABLE contains list of TagIDs to filter -> @FilterTagsTable
	IF @OuterModuleID = 0 AND @FilterByTags = 1
	BEGIN
		DECLARE @FilterTagsTable TABLE (TagID INT NOT NULL PRIMARY KEY);
		IF @FillterSettingsSource = 1 -- portal settings
			BEGIN
				INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
			END
		ELSE
			BEGIN
				INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID;
			END
	END
END

DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserEditCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can edit based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal,

IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
	END
	ELSE -- by module
	BEGIN
	INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		WHERE rps.ModuleID = @ModuleID AND rps.RoleID IS NULL;
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
		UNION
		SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
	END
	ELSE -- by module
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.ModuleID = @ModuleID GROUP BY rpsc.[CategoryID]
		UNION
		SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upsc.[CategoryID];
	END
END

IF @NewsFilterCategories != ''''
BEGIN
	INSERT INTO @FiltredByCategories SELECT * FROM {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterCategories)
	INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.[CategoryID] FROM @UserViewCategories as uvc INNER JOIN @FiltredByCategories as fbc ON uvc.CategoryID = fbc.CategoryID;
END
ELSE
BEGIN
	IF @OnlyOneCategory <> 0 -- filtrira se po jednoj kategoriji
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories WHERE CategoryID = @OnlyOneCategory;
		INSERT INTO @FiltredByCategories SELECT @OnlyOneCategory;
	END
	ELSE IF @OuterModuleID <> 0
	BEGIN
		IF @CategoryFilterType = 0 -- 0 All categories
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter 
			SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @OuterModuleID
				
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID;
		END
		ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		BEGIN
			WITH hierarchy AS(
				SELECT [CategoryID], [ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID)) AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID], c.[ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				)
			INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
			INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
		END
	END
	ELSE
	BEGIN
		IF @CategoryFilterType = 0 -- 0 All categories
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS pci ON pci.CategoryID = cl.CategoryID AND pci.PortalID = @PortalID
				
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID;
			END
			ELSE -- module
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @ModuleID
				
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID;
			END
		END
		ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
				INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;			
			END
			ELSE -- module
			BEGIN
				WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
				INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
			END
		END
	END
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @NewsFilterAuthors = '''' AND @NewsFilterGroups = ''''
BEGIN
	IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
			IF @FilterByAuthor <> 0
			BEGIN
				SET @FilterAuthorOrAuthors = 1;
				SELECT @FilterByAuthor = UserID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
			END
		END
	END
ELSE
BEGIN
-- ovaj dio odnosi se na filtriranje autora
	IF @OuterModuleID <> 0 AND @ShowAllAuthors = 0 -- filter iu other modula
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID
	END
	ELSE
	BEGIN
		IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0 -- filter glavnog newsa
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			IF @FillterSettingsSource = 1 -- by portal
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai WHERE pai.PortalID = @PortalID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID
			END
			ELSE -- by modul
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID
			END
		END
		ELSE IF @FilterByAuthor <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
		END
		ELSE IF @FilterByGroupID <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID
		END
	END
END
END
ELSE
BEGIN
-- treba selektirati sve autore ili grupe !!!
	SET @FilterAuthorOrAuthors = 1;
	IF @NewsFilterAuthors <> '''' AND @NewsFilterGroups <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID WHERE PortalID = @PortalID
		UNION
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID = @PortalID
	END
	ELSE IF @NewsFilterAuthors <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID WHERE PortalID = @PortalID 
	END
	ELSE IF @NewsFilterGroups <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID = @PortalID
	END
END
-- kategorije sa edit pravima
IF @AdminOrSuperUser = 1 OR @Perm_EditAllCategores = 1
BEGIN	
	SET @EditPermission = 1;
END

DECLARE @ArticlesInCategories INT;
SET @ArticlesInCategories = 0;
DECLARE @ArticlesInRolesAndUsers INT;
SET @ArticlesInRolesAndUsers = 0;

IF @IsSocialInstance = 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID		
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS final
	END
	ELSE
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID		
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS final
	END
END
ELSE IF @FilterBySocialGroup = 1
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS final
	END
	ELSE
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS final
	END
END 
ELSE IF @FilterByDNNUserID <> 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND na.UserID = @FilterByDNNUserID
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS final
	END
	ELSE
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.HideDefaultLocale = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS final
	END
END
SELECT @ArticlesInRolesAndUsers + @ArticlesInCategories' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetArticles]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetArticles]
	@ViewType TINYINT = 0, -- 0 - View, 1 - Editor
	@PortalID INT, -- current Portal
	@ModuleID INT, -- current Module, portal sharing isto sadrzi dobre kategorije, auto add i setingsi su snimljeni kod tog modula
	@UserID INT,
	@OrderBy NVARCHAR(20) = ''PublishDate DESC'',
	@ItemsFrom INT = 1,
	@ItemsTo INT = 5,
	@DateRange BIT = 0,
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	/* od tud ide filter */
	@OnlyOneCategory INT = NULL, -- used for category menu or vhen need to filter by one category
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1, -- gleda se filtriranje autora po modulu ili portalu
	@FilterByAuthor INT = 0, -- ako se selektiran jedan autor
	@FilterByGroupID INT = 0, -- ako je selektirana grupa
	@FilterByTags BIT = 0,
	@FilterByArticles BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@EditOnlyAsOwner BIT = 0, -- news settings
	@UserCanApprove BIT = 0, -- news settings
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,	
	@FirstOrderBy NVARCHAR(20) = '''',--''Featured DESC'', -- featured articles on top	
	@Perm_ViewAllCategores BIT = 0, -- permission settings View all categories
	@Perm_EditAllCategores BIT = 0, -- permission settings Edit all categories
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1, -- 0 All categories, 1 - SELECTion, 2 - AutoAdd
	@PermissionSettingsSource BIT = 1, -- 1 portal, 0 module
	@FillterSettingsSource BIT = 1, -- 1 portal, 0 module	
	@OuterModuleID INT = 0,
	@HideUnlocalizedItems BIT = 0,
	@NewsFilterCategories NVARCHAR(1000) = '''',
	@NewsFilterAuthors NVARCHAR(1000) = '''',
	@NewsFilterGroups NVARCHAR(1000) = ''''
AS
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @EditPermission TINYINT;
SET @EditPermission = 0;

IF @NewsFilterCategories = ''''
BEGIN
	IF @OuterModuleID = 0 AND @FilterByArticles = 1
	BEGIN
		DECLARE @FilterArticlesTable TABLE (ArticleID INT NOT NULL PRIMARY KEY);
		IF @FillterSettingsSource = 1 -- -- portal settings
			BEGIN
				INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByArticles] WHERE FilterPortalID = @PortalID;
			END
		ELSE
			BEGIN
				INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByArticles] WHERE FilterModuleID = @ModuleID;
			END
	END
	-- temp TABLE contains list of TagIDs to filter -> @FilterTagsTable
	IF @OuterModuleID = 0 AND @FilterByTags = 1
	BEGIN
		DECLARE @FilterTagsTable TABLE (TagID INT NOT NULL PRIMARY KEY);
		IF @FillterSettingsSource = 1 -- portal settings
			BEGIN
				INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
			END
		ELSE
			BEGIN
				INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID;
			END
	END
END

DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserEditCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can edit based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal

IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.[PremissionSettingsID] = rpsc.[PremissionSettingsID]
		WHERE rps.[PortalID] = @PortalID AND rps.[ModuleID] IS NULL AND rps.[RoleID] IS NULL;
	END
	ELSE -- by module
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.[PremissionSettingsID] = rpsc.[PremissionSettingsID]
		WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID AND rps.RoleID IS NULL;
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
		UNION
		SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.PortalID = @PortalID AND ups.UserID = @UserID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
	END
	ELSE -- by module
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.ModuleID = @ModuleID GROUP BY rpsc.[CategoryID]
		UNION
		SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upsc.[CategoryID];
	END
END

IF @NewsFilterCategories != ''''
BEGIN
	INSERT INTO @FiltredByCategories SELECT * FROM {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterCategories)
	INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.[CategoryID] FROM @UserViewCategories as uvc INNER JOIN @FiltredByCategories as fbc ON uvc.CategoryID = fbc.CategoryID;
END
ELSE
BEGIN
	IF @OnlyOneCategory IS NOT NULL -- filtrira se po jednoj kategoriji
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories WHERE CategoryID = @OnlyOneCategory;
		INSERT INTO @FiltredByCategories SELECT @OnlyOneCategory;
	END
	ELSE IF @OuterModuleID <> 0
	BEGIN
		IF @CategoryFilterType = 0 -- 0 All categories
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter 
			SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @OuterModuleID
				
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID;
		END
		ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		BEGIN
			WITH hierarchy AS(
				SELECT [CategoryID], [ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID)) AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID], c.[ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				)
			INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
			INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
		END
	END
	ELSE
	BEGIN
		IF @CategoryFilterType = 0 -- 0 All categories
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS pci ON pci.CategoryID = cl.CategoryID AND pci.PortalID = @PortalID
				
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID;
			END
			ELSE -- module
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @ModuleID
				
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID;
			END
		END
		ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
				INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;			
			END
			ELSE -- module
			BEGIN
				WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
				INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
			END
		END
	END
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @NewsFilterAuthors = '''' AND @NewsFilterGroups = ''''
BEGIN
	IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
			IF @FilterByAuthor <> 0
			BEGIN
				SET @FilterAuthorOrAuthors = 1;
				SELECT @FilterByAuthor = UserID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
			END
		END
	END
	ELSE
	BEGIN
-- ovaj dio odnosi se na filtriranje autora
	IF @OuterModuleID <> 0 AND @ShowAllAuthors = 0 -- filter iz other modula
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID
	END
	ELSE
	BEGIN
		IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0 -- filter glavnog newsa
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			IF @FillterSettingsSource = 1 -- by portal
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai WHERE pai.PortalID = @PortalID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID
			END
			ELSE -- by modul
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID
			END
		END
		ELSE IF @FilterByAuthor <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
		END
		ELSE IF @FilterByGroupID <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID
		END
	END
END
END
ELSE
BEGIN
-- treba selektirati sve autore ili grupe !!!
	SET @FilterAuthorOrAuthors = 1;
	IF @NewsFilterAuthors <> '''' AND @NewsFilterGroups <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID WHERE PortalID = @PortalID
		UNION
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID = @PortalID
	END
	ELSE IF @NewsFilterAuthors <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID WHERE PortalID = @PortalID 
	END
	ELSE IF @NewsFilterGroups <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList
		SELECT ap.[UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID = @PortalID
	END
END
-- kategorije sa edit pravima
IF @AdminOrSuperUser = 1 OR @Perm_EditAllCategores = 1
BEGIN	
	INSERT INTO @UserEditCategories SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	SET @EditPermission = 1;
END
ELSE
BEGIN
	IF @UserID = -1
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
		ELSE -- by module
		BEGIN
		INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.RoleID IS NULL AND rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID;
		END
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upatc.[CategoryID];
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upatc.[CategoryID];
		END	
	END
	IF EXISTS(SELECT * FROM @UserEditCategories) BEGIN SET @EditPermission = 2; END
END

DECLARE @LocalizedCategories TABLE (ID INT NOT NULL PRIMARY KEY, Name NVARCHAR(200), Position INT, CategoryURL NVARCHAR(1500));
IF @LocaleCode IS NOT NULL
BEGIN
	WITH LocCategories(ID, Name, Position, CategoryURL) AS (
		SELECT Cat.CategoryID AS ID, cl.Title AS Name, Cat.Position, Cat.CategoryURL FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = Cat.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON uvc.CategoryID = cl.CategoryID WHERE Cat.PortalID = @PortalID AND cl.LocaleCode = @LocaleCode
	),
	NotLocCategories(ID, Name, Position, CategoryURL) AS (
		SELECT Cat.CategoryID AS ID, Cat.CategoryName AS Name, Cat.Position, Cat.CategoryURL FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = Cat.CategoryID WHERE Cat.PortalID = @PortalID AND Cat.CategoryID NOT IN (SELECT ID FROM LocCategories)
	)
	INSERT INTO @LocalizedCategories SELECT ID, Name, Position, CategoryURL FROM (SELECT ID, Name, Position, CategoryURL FROM LocCategories UNION ALL SELECT ID, Name, Position, CategoryURL FROM NotLocCategories) AS ArticleCategories
END
ELSE
BEGIN
	INSERT INTO @LocalizedCategories SELECT Cat.CategoryID AS ID, Cat.CategoryName AS Name, Cat.Position, Cat.CategoryURL FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = cat.CategoryID WHERE Cat.PortalID = @PortalID
END

IF @IsSocialInstance = 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
		SELECT TOP (@ItemsTo - @ItemsFrom + 1) ArticleID FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID	
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID			 
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	 	 
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID		  
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	 				  
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))	 
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC
	),
	FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
		SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
	)
	SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		 FROM (
			 SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
				  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
				  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
				  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
				  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
				   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
			 UNION ALL
			 SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
				  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
				  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
				  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
				  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription],n.[CFGroupeID]
			  FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID) As Result
		ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
	ELSE
	BEGIN
		SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		 FROM (SELECT
		  n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID], ROW_NUMBER() OVER (ORDER BY 
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID	
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID 	 		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID			 
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID 	 		 
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID		  
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))	 
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
END
ELSE IF @FilterBySocialGroup = 1
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
		SELECT TOP (@ItemsTo - @ItemsFrom + 1) ArticleID FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY 
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 		  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID	 		  		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID	 		  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0)) 
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT *,
			CASE @EditPermission 
				WHEN 0 THEN 0
				WHEN 1 THEN 1
				WHEN 2 THEN
				CASE @EditOnlyAsOwner
					WHEN 0 THEN			
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END
						END  			
					WHEN 1 THEN
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END 
						END
				END
				WHEN 3 THEN
					CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
						CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
							THEN 1
							ELSE 0
							END
						END 
			END AS ''CanEdit'',
			(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
			 CASE Result.Active
				WHEN 1 THEN 0
				WHEN 0 THEN 1
			 END AS ''Published'',
			 CASE @UserCanApprove
				WHEN 0 THEN 0
				WHEN 1 THEN
					CASE Result.Approved
					 WHEN 1 THEN 0
					 WHEN 0 THEN
						 CASE Result.Active
							WHEN 1 THEN 1
							WHEN 0 THEN 0
						END
					END
			 END AS ''Approve''
			 FROM ( 
				 SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
					   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				 UNION ALL
				 SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription],n.[CFGroupeID]
				  FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID) As Result
			ORDER BY
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
	ELSE
	BEGIN
		SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		 FROM (SELECT
		  n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID], ROW_NUMBER() OVER (ORDER BY 
		 CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0)) 
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
END
ELSE IF @FilterByDNNUserID <> 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
		SELECT TOP (@ItemsTo - @ItemsFrom + 1) ArticleID FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC, 
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID     		  	 	 	 	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1)AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID	 		  	 	 	 		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID	 		  	 	 	 		 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID 
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT *,
			CASE @EditPermission 
				WHEN 0 THEN 0
				WHEN 1 THEN 1
				WHEN 2 THEN
				CASE @EditOnlyAsOwner
					WHEN 0 THEN			
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END
						END  			
					WHEN 1 THEN
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END 
						END
				END
				WHEN 3 THEN
					CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
						CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
							THEN 1
							ELSE 0
							END
						END 
			END AS ''CanEdit'',
			(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
			 CASE Result.Active
				WHEN 1 THEN 0
				WHEN 0 THEN 1
			 END AS ''Published'',
			 CASE @UserCanApprove
				WHEN 0 THEN 0
				WHEN 1 THEN
					CASE Result.Approved
					 WHEN 1 THEN 0
					 WHEN 0 THEN
						 CASE Result.Active
							WHEN 1 THEN 1
							WHEN 0 THEN 0
						END
					END
			 END AS ''Approve''
			 FROM (
				 SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
					   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				 UNION ALL
				 SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription],n.[CFGroupeID]
				  FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID) As Result
			ORDER BY
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
	ELSE
	BEGIN
		SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		 FROM (SELECT
		  n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID], ROW_NUMBER() OVER (ORDER BY 
		 CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	 		 		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	 		 			
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	 		 			 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID 
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
END' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContentCount]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContentCount]
	@ViewType TINYINT = 0, -- 0 - View, 1 - Editor
	@PortalID INT, -- current Portal
	@ModuleID INT, -- current Module, portal sharing isto sadrzi dobre kategorije, auto add i setingsi su snimljeni kod tog modula
	@UserID INT,
	@DateRange BIT = 0,
	@DateRangeType TINYINT = 0, -- OVO JOS NEZNAM KAK BUDEM IZVEL uglavnom ako je 2 znaci da se kod eventa gleda start date, dok ako se ide s kalenda onda se to nece gledati
	@StartDate DATETIME = NULL, -- ako nije show all events
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	/* od tud ide filter */
	@OnlyOneCategory INT = 0, -- used for category menu or vhen need to filter by one category
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1, -- gleda se filtriranje autora po modulu ili portalu
	@FilterByAuthor INT = 0, -- ako se selektiran jedan autor
	@FilterByGroupID INT = 0, -- ako je selektirana grupa
	@FilterByTags BIT = 0,
	@FilterByArticles BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@EditOnlyAsOwner BIT = 0, -- news settings
	@UserCanApprove BIT = 0, -- news settings
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,	
	@FirstOrderBy NVARCHAR(20) = '''',--''Featured DESC'', -- featured articles on top	
	@Perm_ViewAllCategores BIT = 0, -- permission settings View all categories
	@Perm_EditAllCategores BIT = 0, -- permission settings Edit all categories
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1, -- 0 All categories, 1 - SELECTion, 2 - AutoAdd
	@PermissionSettingsSource BIT = 1, -- 1 portal, 0 module
	@FillterSettingsSource BIT = 1, -- 1 portal, 0 module
	@OuterModuleID INT = 0,
	@HideUnlocalizedItems BIT = 0,
	@NewsFilterCategories NVARCHAR(1000) = '''',
	@NewsFilterAuthors NVARCHAR(1000) = '''',
	@NewsFilterGroups NVARCHAR(1000) = ''''
AS
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @EditPermission TINYINT;
SET @EditPermission = 0;

IF @NewsFilterCategories = ''''
BEGIN
	IF @OuterModuleID = 0 AND @FilterByArticles = 1
	BEGIN
		DECLARE @FilterArticlesTable TABLE (ArticleID INT NOT NULL PRIMARY KEY);
		IF @FillterSettingsSource = 1 -- portal settings
			BEGIN
				INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByArticles] WHERE FilterPortalID = @PortalID;
			END
		ELSE
			BEGIN
				INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByArticles] WHERE FilterModuleID = @ModuleID;
			END
	END
	-- temp TABLE contains list of TagIDs to filter -> @FilterTagsTable
	IF @OuterModuleID = 0 AND @FilterByTags = 1
	BEGIN
		DECLARE @FilterTagsTable TABLE (TagID INT NOT NULL PRIMARY KEY);
		IF @FillterSettingsSource = 1 -- portal settings
			BEGIN
				INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
			END
		ELSE
			BEGIN
				INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID;
			END
	END
END

DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserEditCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can edit based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal,

IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
	END
	ELSE -- by module
	BEGIN
	INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		WHERE rps.ModuleID = @ModuleID AND rps.RoleID IS NULL;
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
		UNION
		SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
	END
	ELSE -- by module
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.ModuleID = @ModuleID GROUP BY rpsc.[CategoryID]
		UNION
		SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upsc.[CategoryID];
	END
END

IF @NewsFilterCategories != ''''
BEGIN
	INSERT INTO @FiltredByCategories SELECT * FROM {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterCategories)
	INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.[CategoryID] FROM @UserViewCategories as uvc INNER JOIN @FiltredByCategories as fbc ON uvc.CategoryID = fbc.CategoryID;
END
ELSE
BEGIN
	IF @OnlyOneCategory <> 0 -- filtrira se po jednoj kategoriji
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories WHERE CategoryID = @OnlyOneCategory;
		INSERT INTO @FiltredByCategories SELECT @OnlyOneCategory;
	END
	ELSE IF @OuterModuleID <> 0
	BEGIN
		IF @CategoryFilterType = 0 -- 0 All categories
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter 
			SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @OuterModuleID
				
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID;
		END
		ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		BEGIN
			WITH hierarchy AS(
				SELECT [CategoryID], [ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID)) AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID], c.[ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				)
			INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
			INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
		END
	END
	ELSE
	BEGIN
		IF @CategoryFilterType = 0 -- 0 All categories
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS pci ON pci.CategoryID = cl.CategoryID AND pci.PortalID = @PortalID
				
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID;
			END
			ELSE -- module
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @ModuleID
				
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID;
			END
		END
		ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
				INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;			
			END
			ELSE -- module
			BEGIN
				WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
				INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
			END
		END
	END
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @NewsFilterAuthors = '''' AND @NewsFilterGroups = ''''
BEGIN
	IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
			IF @FilterByAuthor <> 0
			BEGIN
				SET @FilterAuthorOrAuthors = 1;
				SELECT @FilterByAuthor = UserID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
			END
		END
	END
ELSE
BEGIN
-- ovaj dio odnosi se na filtriranje autora
	IF @OuterModuleID <> 0 AND @ShowAllAuthors = 0 -- filter iu other modula
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID
	END
	ELSE
	BEGIN
		IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0 -- filter glavnog newsa
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			IF @FillterSettingsSource = 1 -- by portal
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai WHERE pai.PortalID = @PortalID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID
			END
			ELSE -- by modul
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID
			END
		END
		ELSE IF @FilterByAuthor <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
		END
		ELSE IF @FilterByGroupID <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID
		END
	END
END
END
ELSE
BEGIN
-- treba selektirati sve autore ili grupe !!!
	SET @FilterAuthorOrAuthors = 1;
	IF @NewsFilterAuthors <> '''' AND @NewsFilterGroups <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID WHERE PortalID = @PortalID
		UNION
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID = @PortalID
	END
	ELSE IF @NewsFilterAuthors <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID WHERE PortalID = @PortalID 
	END
	ELSE IF @NewsFilterGroups <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID = @PortalID
	END
END
-- kategorije sa edit pravima
IF @AdminOrSuperUser = 1 OR @Perm_EditAllCategores = 1
BEGIN	
	SET @EditPermission = 1;
END

DECLARE @ArticlesInCategories INT;
SET @ArticlesInCategories = 0;
DECLARE @ArticlesInRolesAndUsers INT;
SET @ArticlesInRolesAndUsers = 0;

IF @IsSocialInstance = 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		SET @ArticlesInCategories = 
		(SELECT COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
			LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 
		WHERE na.PortalID=@PortalID
			AND na.HasPermissions = 0
			AND na.EventArticle = 0
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
			AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate		
			AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
		GROUP BY na.ArticleID) AS InnerCount);
		SET @ArticlesInCategories = @ArticlesInCategories +
		(SELECT COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
			LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 
		WHERE na.PortalID=@PortalID
			AND na.HasPermissions = 0
			AND na.EventArticle = 1
			AND ne.Recurring = 0
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
			AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate		
			AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
		GROUP BY na.ArticleID) AS InnerCount);
		SET @ArticlesInCategories = @ArticlesInCategories +
		(SELECT COUNT(ArticleID) FROM (SELECT na.[ArticleID], nerd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] as nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
			CASE @DateRangeType
			WHEN 2 THEN -- @StartDate min value
				CASE WHEN ne.UpcomingOccurrences > 1
				THEN
					CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
							  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
						THEN 1
						ELSE 0
					END
				ELSE
					CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
							  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
						THEN 1
						ELSE 0
					END
				END
			WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
				CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
					THEN 1
					ELSE 0
				END
			WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
				CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
					THEN 1
					ELSE 0
				END
			ELSE 0
			END	
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
			LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
			LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 
		WHERE na.PortalID=@PortalID
			AND na.HasPermissions = 0
			AND na.EventArticle = 1
			AND ne.Recurring = 1
			AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
			AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
			AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
			AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate		
			AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
			AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
		GROUP BY na.ArticleID, nerd.RecurringID) AS InnerCount);
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID		
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS final
	END
	ELSE
	BEGIN
		SET @ArticlesInCategories = 
			(SELECT COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate		
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
		GROUP BY na.ArticleID) AS InnerCount);
		SET @ArticlesInCategories = @ArticlesInCategories +
			(SELECT COUNT(ArticleID) FROM (SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate		
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
		GROUP BY na.ArticleID) AS InnerCount);
		SET @ArticlesInCategories = @ArticlesInCategories +
			(SELECT COUNT(*) FROM (SELECT na.[ArticleID], nerd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] as nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
				CASE @DateRangeType
				WHEN 2 THEN -- @StartDate min value
					CASE WHEN ne.UpcomingOccurrences > 1
					THEN
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					ELSE
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					END
				WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
					CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
				CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
					THEN 1
					ELSE 0
				END
				ELSE 0
				END	
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 1
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate		
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
		GROUP BY na.ArticleID, nerd.RecurringID) AS InnerCount);
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID		
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS final
	END
END
ELSE IF @FilterBySocialGroup = 1
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS final
	END
	ELSE
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS final
	END
END 
ELSE IF @FilterByDNNUserID <> 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND na.UserID = @FilterByDNNUserID
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID
		) AS final
	END
	ELSE
	BEGIN
		SELECT @ArticlesInCategories = COUNT(CountTable.ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS CountTable;
		SELECT @ArticlesInRolesAndUsers = COUNT(ArticleID) FROM (
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.HideDefaultLocale = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) AND (na.[ExpireDate] >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			GROUP BY na.ArticleID
		) AS final
	END
END
SELECT @ArticlesInRolesAndUsers + @ArticlesInCategories' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContent]
	@ViewType TINYINT = 0, -- 0 - View, 1 - Editor
	@PortalID INT, -- current Portal
	@ModuleID INT, -- current Module, portal sharing isto sadrzi dobre kategorije, auto add i setingsi su snimljeni kod tog modula
	@UserID INT,
	@OrderBy NVARCHAR(20),
	@ItemsFrom INT,
	@ItemsTo INT,
	@DateRange BIT = 0,
	@DateRangeType TINYINT = 0, -- OVO JOS NEZNAM KAK BUDEM IZVEL uglavnom ako je 2 znaci da se kod eventa gleda start date, dok ako se ide s kalenda onda se to nece gledati
	@StartDate DATETIME = NULL, -- ako nije show all events
	@FromDate DATETIME = NULL, -- articles
	@ToDate DATETIME = NULL,
	@eFromDate DATETIME = NULL, -- events
	@eToDate DATETIME = NULL,
	/* od tud ide filter */
	@OnlyOneCategory INT = 0, -- used for category menu or vhen need to filter by one category
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1, -- gleda se filtriranje autora po modulu ili portalu
	@FilterByAuthor INT = 0, -- ako se selektiran jedan autor
	@FilterByGroupID INT = 0, -- ako je selektirana grupa
	@FilterByTags BIT = 0,
	@FilterByArticles BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@EditOnlyAsOwner BIT = 0, -- news settings
	@UserCanApprove BIT = 0, -- news settings
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,	
	@FirstOrderBy NVARCHAR(20) = '''',--''Featured DESC'', -- featured articles on top	
	@Perm_ViewAllCategores BIT = 0, -- permission settings View all categories
	@Perm_EditAllCategores BIT = 0, -- permission settings Edit all categories
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1, -- 0 All categories, 1 - SELECTion, 2 - AutoAdd
	@PermissionSettingsSource BIT = 1, -- 1 portal, 0 module
	@FillterSettingsSource BIT = 1, -- 1 portal, 0 module	
	@OuterModuleID INT = 0,
	@HideUnlocalizedItems BIT = 0,
	@NewsFilterCategories NVARCHAR(1000) = '''',
	@NewsFilterAuthors NVARCHAR(1000) = '''',
	@NewsFilterGroups NVARCHAR(1000) = ''''
AS
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @EditPermission TINYINT;
SET @EditPermission = 0;

IF @NewsFilterCategories = ''''
BEGIN
	IF @OuterModuleID = 0 AND @FilterByArticles = 1
	BEGIN
		DECLARE @FilterArticlesTable TABLE (ArticleID INT NOT NULL PRIMARY KEY);
		IF @FillterSettingsSource = 1 -- -- portal settings
			BEGIN
				INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByArticles] WHERE FilterPortalID = @PortalID;
			END
		ELSE
			BEGIN
				INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByArticles] WHERE FilterModuleID = @ModuleID;
			END
	END
	-- temp TABLE contains list of TagIDs to filter -> @FilterTagsTable
	IF @OuterModuleID = 0 AND @FilterByTags = 1
	BEGIN
		DECLARE @FilterTagsTable TABLE (TagID INT NOT NULL PRIMARY KEY);
		IF @FillterSettingsSource = 1 -- portal settings
			BEGIN
				INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
			END
		ELSE
			BEGIN
				INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID;
			END
	END

END

DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserEditCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can edit based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal

IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
	END
	ELSE -- by module
	BEGIN
	INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID AND rps.RoleID IS NULL;
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
		UNION
		SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
	END
	ELSE -- by module
	BEGIN
		INSERT INTO @UserViewCategories
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID GROUP BY rpsc.[CategoryID]
		UNION
		SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upsc.[CategoryID];
	END
END

IF @NewsFilterCategories != ''''
BEGIN
	INSERT INTO @FiltredByCategories SELECT * FROM {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterCategories)
	INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.[CategoryID] FROM @UserViewCategories as uvc INNER JOIN @FiltredByCategories as fbc ON uvc.CategoryID = fbc.CategoryID;
END
ELSE
BEGIN
	IF @OnlyOneCategory <> 0 -- filtrira se po jednoj kategoriji
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories WHERE CategoryID = @OnlyOneCategory;
		INSERT INTO @FiltredByCategories SELECT @OnlyOneCategory;
	END
	ELSE IF @OuterModuleID <> 0
	BEGIN
		IF @CategoryFilterType = 0 -- 0 All categories
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter 
			SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @OuterModuleID
				
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID;
		END
		ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		BEGIN
			WITH hierarchy AS(
				SELECT [CategoryID], [ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @OuterModuleID)) AND PortalID = @PortalID
				UNION ALL
				SELECT c.[CategoryID], c.[ParentCategory]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
				)
			INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
			INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
		END
	END
	ELSE
	BEGIN
		IF @CategoryFilterType = 0 -- 0 All categories
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS pci ON pci.CategoryID = cl.CategoryID AND pci.PortalID = @PortalID
				
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID;
			END
			ELSE -- module
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @ModuleID
				
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID;
			END
		END
		ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
				INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;			
			END
			ELSE -- module
			BEGIN
				WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
				INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
			END
		END
	END
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @NewsFilterAuthors = '''' AND @NewsFilterGroups = ''''
BEGIN
	IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
			IF @FilterByAuthor <> 0
			BEGIN
				SET @FilterAuthorOrAuthors = 1;
				SELECT @FilterByAuthor = UserID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
			END
		END
	END
	ELSE
	BEGIN
-- ovaj dio odnosi se na filtriranje autora
	IF @OuterModuleID <> 0 AND @ShowAllAuthors = 0 -- filter iz other modula
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID
	END
	ELSE
	BEGIN
		IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0 -- filter glavnog newsa
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			IF @FillterSettingsSource = 1 -- by portal
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai WHERE pai.PortalID = @PortalID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID
			END
			ELSE -- by modul
			BEGIN
				INSERT INTO @TempAuthorsIDList
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
				UNION 
				SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID
			END
		END
		ELSE IF @FilterByAuthor <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] WHERE [AuthorProfileID] = @FilterByAuthor;
		END
		ELSE IF @FilterByGroupID <> 0
		BEGIN
			SET @FilterAuthorOrAuthors = 1;
			INSERT INTO @TempAuthorsIDList
			SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID
		END
	END
END
END
ELSE
BEGIN
-- treba selektirati sve autore ili grupe !!!
	SET @FilterAuthorOrAuthors = 1;
	IF @NewsFilterAuthors <> '''' AND @NewsFilterGroups <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID WHERE PortalID = @PortalID
		UNION
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID = @PortalID
	END
	ELSE IF @NewsFilterAuthors <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID WHERE PortalID = @PortalID 
	END
	ELSE IF @NewsFilterGroups <> ''''
	BEGIN
		INSERT INTO @TempAuthorsIDList
		SELECT ap.[UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID = @PortalID
	END
END
-- kategorije sa edit pravima
IF @AdminOrSuperUser = 1 OR @Perm_EditAllCategores = 1
BEGIN	
	INSERT INTO @UserEditCategories SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	SET @EditPermission = 1;
END
ELSE
BEGIN
	IF @UserID = -1
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
		ELSE -- by module
		BEGIN
		INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			WHERE rps.RoleID IS NULL AND rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID;
		END
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upatc.[CategoryID];
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserEditCategories
			SELECT rpatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpatc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID = @ModuleID GROUP BY rpatc.[CategoryID]
			UNION
			SELECT upatc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upatc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @ModuleID GROUP BY upatc.[CategoryID];
		END	
	END
	IF EXISTS(SELECT * FROM @UserEditCategories) BEGIN SET @EditPermission = 2; END
END

DECLARE @LocalizedCategories TABLE (ID INT NOT NULL PRIMARY KEY, Name NVARCHAR(200), Position INT, CategoryURL NVARCHAR(1500));
IF @LocaleCode IS NOT NULL
BEGIN
	WITH LocCategories(ID, Name, Position, CategoryURL) AS (
		SELECT Cat.CategoryID AS ID, cl.Title AS Name, Cat.Position, Cat.CategoryURL FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = Cat.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON uvc.CategoryID = cl.CategoryID WHERE Cat.PortalID = @PortalID AND cl.LocaleCode = @LocaleCode
	),
	NotLocCategories(ID, Name, Position, CategoryURL) AS (
		SELECT Cat.CategoryID AS ID, Cat.CategoryName AS Name, Cat.Position, Cat.CategoryURL FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = Cat.CategoryID WHERE Cat.PortalID = @PortalID AND Cat.CategoryID NOT IN (SELECT ID FROM LocCategories)
	)
	INSERT INTO @LocalizedCategories SELECT ID, Name, Position, CategoryURL FROM (SELECT ID, Name, Position, CategoryURL FROM LocCategories UNION ALL SELECT ID, Name, Position, CategoryURL FROM NotLocCategories) AS ArticleCategories
END
ELSE
BEGIN
	INSERT INTO @LocalizedCategories SELECT Cat.CategoryID AS ID, Cat.CategoryName AS Name, Cat.Position, Cat.CategoryURL FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = cat.CategoryID WHERE Cat.PortalID = @PortalID
END

IF @IsSocialInstance = 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID,StartDate,RecurringID) AS(
			SELECT TOP (@ItemsTo - @ItemsFrom + 1) ArticleID, StartDate,RecurringID FROM
			(SELECT n.ArticleID,n.Featured,n.PublishDate,n.NumberOfViews,n.RatingValue,n.DateAdded,n.[ExpireDate],n.LastModified,n.NumberOfComments,n.Title,
				CASE WHEN n.EventArticle = 0 THEN n.PublishDate ELSE CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END END AS ''StartDate'',
				CASE WHEN n.EventArticle = 1 AND ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID'',
		ROW_NUMBER() OVER (ORDER BY
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ned.ArticleID = nerd.ArticleID AND ned.ArticleID IS NOT NULL AND ned.Recurring = 1 AND 1 =
			CASE @DateRangeType
					WHEN 2 THEN -- @StartDate min value
					CASE WHEN ned.UpcomingOccurrences > 1
					THEN
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(ned.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					ELSE
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					END
					WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
						CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
							THEN 1
							ELSE 0
						END
					WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
						CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
							THEN 1
							ELSE 0
						END
					ELSE 0
				END	
			WHERE n.ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID	
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 1
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] as nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
				CASE @DateRangeType
					WHEN 2 THEN -- @StartDate min value
						CASE WHEN ne.UpcomingOccurrences > 1
						THEN
							CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
									  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
								THEN 1
								ELSE 0
							END
						ELSE
							CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
									  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
								THEN 1
								ELSE 0
							END
						END
					WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
						CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
							THEN 1
							ELSE 0
						END
					WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
						CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
							THEN 1
							ELSE 0
						END
					ELSE 0
				END	
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID  		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 1
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID			 
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	 	 
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID		  
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 	 				  
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))	 
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo
		 ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC
	),
	FinalLocalizedArticleIDsSet (ArticleID,RecurringID,StartDate,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
		SELECT ncl.ArticleID,fais.RecurringID,fais.StartDate,ncl.Title,ncl.SubTitle,ncl.Summary,ncl.Article,ncl.DetailTypeData,ncl.clTitleLink AS TitleLink ,ncl.MetaDecription,ncl.MetaKeywords,ncl.MainImageTitle,ncl.MainImageDescription
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl INNER JOIN FinalArticleIDsSet AS fais ON ncl.ArticleID = fais.ArticleID AND LocaleCode = @LocaleCode
	)
	SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		 FROM (
			SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],
					 --CASE WHEN n.EventArticle = 0 THEN n.PublishDate ELSE CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END END AS ''StartDate'',
					 fais.StartDate,
					 fais.RecurringID,
					 n.[CFGroupeID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
					INNER JOIN FinalArticleIDsSet AS fais ON n.ArticleID = fais.ArticleID AND fais.ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet)
					--LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
					--LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON fais.ArticleID = nerd.ArticleID AND fais.RecurringID IS NOT NULL AND nerd.RecurringID = fais.RecurringID
					--WHERE n.ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
			UNION ALL
			SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription],
					 --CASE WHEN n.EventArticle = 0 THEN n.PublishDate ELSE CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END END AS ''StartDate'',
					 --CASE WHEN n.EventArticle = 1 AND ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID'',
					 fla.StartDate,
					 fla.RecurringID,
					 n.[CFGroupeID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID 
				--LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON fla.ArticleID = ned.ArticleID
				--LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON fla.ArticleID = nerd.ArticleID AND fla.RecurringID IS NOT NULL AND nerd.RecurringID = fla.RecurringID
		) As Result
		ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
	ELSE
	BEGIN
		SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root''))
		AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		 FROM (SELECT
		  n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],
		  CASE WHEN n.[EventArticle] = 1 AND ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID''
		  ,n.[CFGroupeID], ROW_NUMBER() OVER (ORDER BY 
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ned.ArticleID = nerd.ArticleID AND ned.ArticleID IS NOT NULL AND ned.Recurring = 1 AND 1 =
		 CASE @DateRangeType
				WHEN 2 THEN -- @StartDate min value
					CASE WHEN ned.UpcomingOccurrences > 1
					THEN
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(ned.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					ELSE
						CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
								  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					END
				WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
					CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
					CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
						THEN 1
						ELSE 0
					END
				ELSE 0
			END	
		 WHERE n.ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID	
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID 	 		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION ALL -- simple event
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID 	 		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRangeType = 2 AND ne.StartDate >= @StartDate) OR (@DateRangeType = 1 AND (ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate))) 
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION ALL -- recurring event
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 1
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] as nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
				CASE @DateRangeType
					WHEN 2 THEN -- @StartDate min value
						CASE WHEN ne.UpcomingOccurrences > 1
						THEN
							CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
									  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
								THEN 1
								ELSE 0
							END
						ELSE
							CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
									  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
								THEN 1
								ELSE 0
							END
						END
					WHEN 1 THEN -- @FromDate - @ToDate nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate
						CASE WHEN nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime <= @ToDate AND nerdInner.EndDateTime >= @FromDate ORDER BY RecurringID)
							THEN 1
							ELSE 0
						END
					WHEN 0 THEN -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
						CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
							THEN 1
							ELSE 0
						END
					ELSE 0
				END
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID 	 		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 1
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID			 
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID 	 		 
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID		  
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND (@DateRange = 0 OR ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate AND na.[ExpireDate] >= @CurrentDate)))
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))	 
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
END
ELSE IF @FilterBySocialGroup = 1
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
		SELECT TOP (@ItemsTo - @ItemsFrom + 1) ArticleID FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY 
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
  				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID 		  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID	 		  		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 	
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID	 		  	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0)) 
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT *,
			CASE @EditPermission 
				WHEN 0 THEN 0
				WHEN 1 THEN 1
				WHEN 2 THEN
				CASE @EditOnlyAsOwner
					WHEN 0 THEN			
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END
						END  			
					WHEN 1 THEN
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END 
						END
				END
				WHEN 3 THEN
					CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
						CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
							THEN 1
							ELSE 0
							END
						END 
			END AS ''CanEdit'',
			(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
			 CASE Result.Active
				WHEN 1 THEN 0
				WHEN 0 THEN 1
			 END AS ''Published'',
			 CASE @UserCanApprove
				WHEN 0 THEN 0
				WHEN 1 THEN
					CASE Result.Approved
					 WHEN 1 THEN 0
					 WHEN 0 THEN
						 CASE Result.Active
							WHEN 1 THEN 1
							WHEN 0 THEN 0
						END
					END
			 END AS ''Approve''
			 FROM ( 
				 SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
					   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				 UNION ALL
				 SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription],n.[CFGroupeID]
				  FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID) As Result
			ORDER BY
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
	ELSE
	BEGIN
		SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		 FROM (SELECT
		  n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID], ROW_NUMBER() OVER (ORDER BY 
		 CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId, @UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID = @FilterByAuthor) OR (@FilterAuthorOrAuthors = 0)) 
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
END
ELSE IF @FilterByDNNUserID <> 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
		SELECT TOP (@ItemsTo - @ItemsFrom + 1) ArticleID FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY
		CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC, 
		CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID     		  	 	 	 	 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1)AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID	 		  	 	 	 		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID	 		  	 	 	 		 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID 
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
				))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT *,
			CASE @EditPermission 
				WHEN 0 THEN 0
				WHEN 1 THEN 1
				WHEN 2 THEN
				CASE @EditOnlyAsOwner
					WHEN 0 THEN			
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END
						END  			
					WHEN 1 THEN
						CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
							THEN 1
							ELSE
								CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
								THEN 1
								ELSE
									CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
										THEN 1
										ELSE 0
									END
								END 
						END
				END
				WHEN 3 THEN
					CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
						THEN 1
						ELSE
						CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
							THEN 1
							ELSE 0
							END
						END 
			END AS ''CanEdit'',
			(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
			 CASE Result.Active
				WHEN 1 THEN 0
				WHEN 0 THEN 1
			 END AS ''Published'',
			 CASE @UserCanApprove
				WHEN 0 THEN 0
				WHEN 1 THEN
					CASE Result.Approved
					 WHEN 1 THEN 0
					 WHEN 0 THEN
						 CASE Result.Active
							WHEN 1 THEN 1
							WHEN 0 THEN 0
						END
					END
			 END AS ''Approve''
			 FROM (
				 SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
					   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				 UNION ALL
				 SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription],n.[CFGroupeID]
				  FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID) As Result
			ORDER BY
				CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
				CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
				CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
				CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
				CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
				CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
				CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
				CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
				CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
				CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
				CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
				CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
				CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
				CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
				CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
				CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
				CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
	ELSE
	BEGIN
		SELECT *,
		CASE @EditPermission 
			WHEN 0 THEN 0
			WHEN 1 THEN 1
			WHEN 2 THEN
			CASE @EditOnlyAsOwner
				WHEN 0 THEN			
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END
					END  			
				WHEN 1 THEN
					CASE WHEN EXISTS(SELECT CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c WHERE Result.UserID = @UserID AND c.ArticleID = Result.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM @UserEditCategories))
						THEN 1
						ELSE
							CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
							THEN 1
							ELSE
								CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
									THEN 1
									ELSE 0
								END
							END 
					END
			END
			WHEN 3 THEN
				CASE WHEN EXISTS(SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp WHERE arp.ArticleID = Result.ArticleID AND arp.Edit = 1 AND arp.RoleID IN(SELECT RoleID FROM @UserInRoles))
					THEN 1
					ELSE
					CASE WHEN EXISTS (SELECT [ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup WHERE aup.ArticleID = Result.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID)
						THEN 1
						ELSE 0
						END
					END 
		END AS ''CanEdit'',
		(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = Result.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root'')) AS ''CatToShow'',
		 CASE Result.Active
			WHEN 1 THEN 0
			WHEN 0 THEN 1
		 END AS ''Published'',
		 CASE @UserCanApprove
			WHEN 0 THEN 0
			WHEN 1 THEN
				CASE Result.Approved
				 WHEN 1 THEN 0
				 WHEN 0 THEN
					 CASE Result.Active
						WHEN 1 THEN 1
						WHEN 0 THEN 0
					END
				END
		 END AS ''Approve''
		 FROM (SELECT
		  n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID], ROW_NUMBER() OVER (ORDER BY 
		 CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
		 CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
		 CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
		 CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
		 CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
		 CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
		 CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
		 CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
		 CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
		 CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
		 CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
		 CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
		 CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
		 CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
		 CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
		 CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
		 CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC) AS Kulike
		 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter  AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
  				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID 
  				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	 		 		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@EditPermission = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active = 1 OR na.UserID=@UserID)))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION ALL
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	 		 			
			WHERE na.PortalID=@PortalID
				AND ((@EditPermission = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active = 1 OR na.UserID=@UserID)
				))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID
				LEFT OUTER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
				LEFT OUTER JOIN @FilterArticlesTable AS fba ON fba.ArticleID = na.ArticleID	 		  	 	 	 		 			 	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.UserID = @FilterByDNNUserID 
				AND ((@EditPermission = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active = 1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
				AND ((@Featured = 1 AND na.Featured = 1) OR (@Featured = 0))
				AND ((@DateRange = 0 AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate]  >= @CurrentDate)) OR (@DateRange = 1 AND ((PublishDate >= @FromDate AND PublishDate <= @ToDate) AND (ExpireDate >= @CurrentDate))))
				AND ((@FilterByTags = 1 AND fbt.TagID IS NOT NULL) OR (@FilterByTags = 0))
				AND ((@FilterByArticles = 1 AND fba.ArticleID IS NOT NULL) OR (@FilterByArticles = 0))
			)
		) AS Result WHERE Kulike BETWEEN @ItemsFrom AND @ItemsTo ORDER BY
			CASE WHEN @FirstOrderBy =''Featured DESC'' THEN Featured END DESC,
			CASE WHEN @OrderBy =''PublishDate ASC'' THEN PublishDate END,
			CASE WHEN @OrderBy =''PublishDate DESC'' THEN PublishDate END DESC,
			CASE WHEN @OrderBy =''NumberOfViews ASC'' THEN NumberOfViews END,
			CASE WHEN @OrderBy =''NumberOfViews DESC'' THEN NumberOfViews END DESC,
			CASE WHEN @OrderBy =''RatingValue ASC'' THEN RatingValue END,
			CASE WHEN @OrderBy =''RatingValue DESC'' THEN RatingValue END DESC,
			CASE WHEN @OrderBy =''DateAdded ASC'' THEN DateAdded END,
			CASE WHEN @OrderBy =''DateAdded DESC'' THEN DateAdded END DESC,
			CASE WHEN @OrderBy =''ExpireDate ASC'' THEN ExpireDate END,
			CASE WHEN @OrderBy =''ExpireDate DESC'' THEN ExpireDate END DESC,
			CASE WHEN @OrderBy =''LastModified ASC'' THEN LastModified END,
			CASE WHEN @OrderBy =''LastModified DESC'' THEN LastModified END DESC,
			CASE WHEN @OrderBy =''NumberOfComments ASC'' THEN NumberOfComments END,
			CASE WHEN @OrderBy =''NumberOfComments DESC'' THEN NumberOfComments END DESC,
			CASE WHEN @OrderBy =''Title ASC'' THEN Title END,
			CASE WHEN @OrderBy =''Title DESC'' THEN Title END DESC;
	END
END' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsMenuGetCategories]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsMenuGetCategories]
	@PortalID INT,
	@UserID INT,
	@MenuModuleID INT,
	@DefaultTabID INT,
    @DefaultModuleID INT,
	@AdminOrSuperUser BIT  = 0,
	@CountItems BIT = 0,
	@CountArticles BIT = NULL,
	@CountEvents BIT = NULL,
	@CountEventsLimitByDays INT = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@LocaleCode NVARCHAR(20) = NULL,	
	@ShowAllAuthors BIT = 1, -- filter postavka menija
	@CategoryFilterType TINYINT = 0, --0 All categories, 1 - SELECTion, 2 - AutoAdd
	@HideUnlocalizedItems BIT = 0,
	@PermissionSettingsSource TINYINT = 0, -- None, 1 - portal, 2 - module
	@PermissionsModuleID INT = 0 -- NewsModuleID
AS
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @StartDate DATETIME;
IF @CountEventsLimitByDays IS NOT NULL
BEGIN
	SET @StartDate = DATEADD(DD, -@CountEventsLimitByDays, @CurrentDate);
	SET @CountEventsLimitByDays = 1;
END

DECLARE @UserCanApprove BIT;
SET @UserCanApprove = 0;
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());
DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter

DECLARE @SettingsSource BIT; SET @SettingsSource = 1;
IF @AdminOrSuperUser = 1 OR @PermissionSettingsSource = 0
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL;
			END
		END
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
			END
		END
		ELSE
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID GROUP BY upsc.[CategoryID];
			END
		END
	END
END

IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
BEGIN
		INSERT INTO @UserViewCategoriesWithFilter 
		SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @MenuModuleID
END
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	WITH hierarchy AS(
		SELECT [CategoryID], [ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @MenuModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @MenuModuleID)) AND PortalID = @PortalID
		UNION ALL
		SELECT c.[CategoryID], c.[ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
		)
	INSERT INTO @UserViewCategoriesWithFilter SELECT DISTINCT uvc.CategoryID FROM hierarchy AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
		END
	END
ELSE
BEGIN
	IF @ShowAllAuthors = 0
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @MenuModuleID
		UNION 
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @MenuModuleID
	END
END

DECLARE @tempMenuCats TABLE(
	[CategoryID] INT NOT NULL PRIMARY KEY,
	[PortalID] INT,
	[CategoryName] NVARCHAR(200),
	[Position] INT,
	[ParentCategory] INT,
	[Level] INT,
	[CategoryURL] NVARCHAR(1500),
	[CategoryImage] NVARCHAR(1500),
	[CategoryText] ntext,[Show] BIT)

IF @LocaleCode IS NOT NULL
BEGIN
	WITH LocCategories([CategoryID],[PortalID],[CategoryName],[Position],[ParentCategory],[Level],[CategoryURL],[CategoryImage],[CategoryText]) AS 
	(
		SELECT Cat.[CategoryID],Cat.[PortalID],cl.[Title] AS CategoryName,Cat.[Position],Cat.[ParentCategory],Cat.[Level],Cat.[CategoryURL],Cat.[CategoryImage],cl.[CategoryText] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategoriesWithFilter cwf ON cwf.CategoryID = Cat.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON cwf.CategoryID = cl.CategoryID WHERE Cat.PortalID = @PortalID AND cl.LocaleCode = @LocaleCode
	),
	NotLocCategories([CategoryID],[PortalID],[CategoryName],[Position],[ParentCategory],[Level],[CategoryURL],[CategoryImage],[CategoryText]) AS 
	(
		SELECT Cat.* FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS Cat INNER JOIN @UserViewCategoriesWithFilter cwf ON cwf.CategoryID = Cat.CategoryID WHERE Cat.PortalID = @PortalID AND Cat.CategoryID NOT IN (SELECT CategoryID FROM LocCategories)
	)
	INSERT INTO @tempMenuCats SELECT [CategoryID],[PortalID],[CategoryName],[Position],[ParentCategory],[Level],[CategoryURL],[CategoryImage],[CategoryText],''1'' AS Show FROM (SELECT * FROM LocCategories UNION ALL SELECT * FROM NotLocCategories) AS result
END
ELSE
BEGIN
	INSERT @tempMenuCats
	SELECT [CategoryID],[PortalID],[CategoryName],[Position],[ParentCategory],[Level],[CategoryURL],[CategoryImage],[CategoryText],''1'' AS Show
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cat WHERE cat.CategoryID IN (SELECT CategoryID FROM @UserViewCategoriesWithFilter) AND PortalID = @PortalID;
END

INSERT @tempMenuCats
SELECT [CategoryID],[PortalID],[CategoryName],[Position],[ParentCategory],[Level],[CategoryURL],[CategoryImage],[CategoryText],''0'' AS Show
FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID AND CategoryID NOT IN (SELECT CategoryID FROM @UserViewCategoriesWithFilter);
  
SELECT TOP 1 @DefaultTabID = TabID FROM {databaseOwner}[{objectQualifier}TabModules] WHERE ModuleID = @DefaultModuleID;

IF @CountItems = 1 AND @CountArticles = 0 AND @CountEvents = 0
SET @CountItems = 0

IF @CountItems = 0
BEGIN 
	SELECT ncl.[CategoryID],ncl.[PortalID],ncl.[CategoryName],ncl.[Position],ncl.[ParentCategory],ncl.[Level],ncl.[CategoryURL],ncl.[CategoryImage],ncl.[CategoryText],ncl.Show,
	0 AS ''Count'',
		CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
		CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
	FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
	ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID
	ORDER BY Position ASC, ParentCategory ASC;
END
ELSE
BEGIN

IF @LocaleCode IS NULL
BEGIN
	IF @IsSocialInstance = 0
	BEGIN
		IF @CountArticles = 1 AND @CountEvents = 0 -- only articles
		BEGIN
			SELECT *,
			CASE Show
				WHEN 0 THEN 0
				WHEN 1 THEN	
					CASE @AdminOrSuperUser
					WHEN 1 THEN(
						SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
						WHERE n.PortalID = @PortalID
							AND n.HideDefaultLocale = 0
							AND n.EventArticle = 0
							AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))			 
					)
					WHEN 0 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 0 
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 1
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 0
				 				AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)	
								AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							CASE @UserID
								WHEN -1 THEN 0
								ELSE(
									SELECT COUNT(PerRoles.[ArticleID]) FROM(
										SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
											INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
										WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
											AND arp.ArticleID NOT IN (
											SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
											WHERE n.PortalID = @PortalID
												AND n.HasPermissions = 1
												AND n.HideDefaultLocale = 0
												AND n.EventArticle = 0
												AND aup.UserID = @UserID
												AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
												AND ((@UserCanApprove = 1) OR (n.Approved=1))
												AND (n.Active=1 OR n.UserID=@UserID)
												AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
											)
										) AS PerRoles 
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
									WHERE n.PortalID = @PortalID
										AND n.HasPermissions = 1
										AND n.HideDefaultLocale = 0
										AND n.EventArticle = 0
										AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
										AND ((@UserCanApprove = 1) OR (n.Approved=1))
										AND (n.Active=1 OR n.UserID=@UserID)
										AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								)
								END
							)
						)
					)
				END		
			END AS ''Count''
			FROM (
			SELECT	ncl.[CategoryID],
					ncl.[PortalID],
					ncl.[CategoryName],
					ncl.[Position],
					ncl.[ParentCategory],
					ncl.[Level],
					ncl.[CategoryURL],
					ncl.[CategoryImage],
					ncl.[CategoryText],
					ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
			FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
			ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
			ORDER BY Position ASC, ParentCategory ASC
		END
		ELSE IF @CountEvents = 1 AND @CountArticles = 0 -- only events
		BEGIN
			SELECT *,
			CASE Show
				WHEN 0 THEN 0
				WHEN 1 THEN	
					CASE @AdminOrSuperUser
					WHEN 1 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
							WHERE n.PortalID = @PortalID
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 0
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							SELECT COUNT([ArticleID]) AS cnt FROM
								(SELECT n.[ArticleID],nerd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 1
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
									CASE WHEN @CountEventsLimitByDays IS NOT NULL THEN -- @StartDate min value
										CASE WHEN ne.UpcomingOccurrences > 1
										THEN
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										ELSE
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										END
									ELSE -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
										CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
											THEN 1
											ELSE 0
										END
									END	
								WHERE n.PortalID = @PortalID
									AND n.HideDefaultLocale = 0
									AND n.EventArticle = 1
									AND ne.Recurring = 1
									AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
									AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								GROUP BY n.ArticleID, nerd.RecurringID) AS InnerCount)
						)
					)
					WHEN 0 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 0
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 1
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
									CASE WHEN @CountEventsLimitByDays IS NOT NULL THEN -- @StartDate min value
										CASE WHEN ne.UpcomingOccurrences > 1
										THEN
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										ELSE
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										END
									ELSE -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
										CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
											THEN 1
											ELSE 0
										END
									END	
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 1
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 1
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 0
				 				AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
				 				AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)	
								AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							CASE @UserID
								WHEN -1 THEN 0
								ELSE(
									SELECT COUNT(PerRoles.[ArticleID]) FROM(
										SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
											INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
										WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
											AND arp.ArticleID NOT IN (
											SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
											WHERE n.PortalID = @PortalID
												AND n.HasPermissions = 1
												AND n.HideDefaultLocale = 0
												AND n.EventArticle = 1
												AND ne.Recurring = 0
												AND aup.UserID = @UserID
												AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
												AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
												AND ((@UserCanApprove = 1) OR (n.Approved=1))
												AND (n.Active=1 OR n.UserID=@UserID)
												AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
											)
										) AS PerRoles 
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
									WHERE n.PortalID = @PortalID
										AND n.HasPermissions = 1
										AND n.HideDefaultLocale = 0
										AND n.EventArticle = 1
										AND ne.Recurring = 0
										AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
										AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
										AND ((@UserCanApprove = 1) OR (n.Approved=1))
										AND (n.Active=1 OR n.UserID=@UserID)
										AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								)
								END
							)
						)
					)
				END		
			END AS ''Count''
			FROM (
			SELECT	ncl.[CategoryID],
					ncl.[PortalID],
					ncl.[CategoryName],
					ncl.[Position],
					ncl.[ParentCategory],
					ncl.[Level],
					ncl.[CategoryURL],
					ncl.[CategoryImage],
					ncl.[CategoryText],
					ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
			FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
			ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
			ORDER BY Position ASC, ParentCategory ASC
		END
		ELSE -- articles and events
		BEGIN
			SELECT *,
			CASE Show
				WHEN 0 THEN 0
				WHEN 1 THEN	
					CASE @AdminOrSuperUser
					WHEN 1 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
							WHERE n.PortalID = @PortalID
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 0
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
							WHERE n.PortalID = @PortalID
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 1
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							SELECT COUNT([ArticleID]) AS cnt FROM
								(SELECT n.[ArticleID],nerd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 1
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
									CASE WHEN @CountEventsLimitByDays IS NOT NULL THEN -- @StartDate min value
										CASE WHEN ne.UpcomingOccurrences > 1
										THEN
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										ELSE
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										END
									ELSE -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
										CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
											THEN 1
											ELSE 0
										END
									END	
								WHERE n.PortalID = @PortalID
									AND n.HideDefaultLocale = 0
									AND n.EventArticle = 1
									AND ne.Recurring = 1
									AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
									AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								GROUP BY n.ArticleID, nerd.RecurringID) AS InnerCount)
						)
					)
					WHEN 0 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 0 
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 0
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 1
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
									CASE WHEN @CountEventsLimitByDays IS NOT NULL THEN -- @StartDate min value
										CASE WHEN ne.UpcomingOccurrences > 1
										THEN
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										ELSE
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										END
									ELSE -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
										CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
											THEN 1
											ELSE 0
										END
									END	
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 1
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 1
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 0
				 				AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)	
								AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
							)+(
							CASE @UserID
								WHEN -1 THEN 0
								ELSE(
									SELECT COUNT(PerRoles.[ArticleID]) FROM(
										SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
											INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
										WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
											AND arp.ArticleID NOT IN (
											SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
											WHERE n.PortalID = @PortalID
												AND n.HasPermissions = 1
												AND n.HideDefaultLocale = 0
												AND n.EventArticle = 0
												AND aup.UserID = @UserID
												AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
												AND ((@UserCanApprove = 1) OR (n.Approved=1))
												AND (n.Active=1 OR n.UserID=@UserID)
												AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
											)
										) AS PerRoles 
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
									WHERE n.PortalID = @PortalID
										AND n.HasPermissions = 1
										AND n.HideDefaultLocale = 0
										AND n.EventArticle = 0
										AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
										AND ((@UserCanApprove = 1) OR (n.Approved=1))
										AND (n.Active=1 OR n.UserID=@UserID)
										AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								)
								END
							)
						)
					)
				END		
			END AS ''Count''
			FROM (
			SELECT	ncl.[CategoryID],
					ncl.[PortalID],
					ncl.[CategoryName],
					ncl.[Position],
					ncl.[ParentCategory],
					ncl.[Level],
					ncl.[CategoryURL],
					ncl.[CategoryImage],
					ncl.[CategoryText],
					ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
			FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
			ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
			ORDER BY Position ASC, ParentCategory ASC
		END
	END
	ELSE IF @FilterBySocialGroup = 1
	BEGIN
		SELECT *,
		CASE Show
			WHEN 0 THEN 0
			WHEN 1 THEN	
				CASE @AdminOrSuperUser
				WHEN 1 THEN (
					SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = n.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
						INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					WHERE n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
						AND n.PortalID = @PortalID
						AND n.HideDefaultLocale = 0
				)
				WHEN 0 THEN(
					SELECT ((
						SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = n.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
							INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
						WHERE n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							AND ((@UserCanApprove = 1) OR (n.Approved=1))
							AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							AND n.HasPermissions = 0
							AND n.HideDefaultLocale = 0
							AND n.PortalID = @PortalID
						)+(
						SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = n.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
							INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
						WHERE ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
							AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							AND ((@UserCanApprove = 1) OR (n.Approved=1))
							AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							AND n.HasPermissions = 1
							AND n.HideDefaultLocale = 0
							AND n.PortalID = @PortalID
						)+(
						CASE @UserID
						WHEN -1 THEN 0
						ELSE(
						SELECT COUNT(PerRoles.[ArticleID]) FROM(
							SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
							WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
								AND arp.ArticleID NOT IN (
								SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = n.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
									INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
								WHERE aup.UserID = @UserID
				 					AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
									AND ((@UserCanApprove = 1) OR (n.Approved=1))
									AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
									AND n.HasPermissions = 1
									AND n.HideDefaultLocale = 0
									AND n.PortalID = @PortalID
								)
							 ) AS PerRoles 
							 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
							 WHERE n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								 AND ((@UserCanApprove = 1) OR (n.Approved=1))
								 AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
								 AND n.HasPermissions = 1
								 AND n.HideDefaultLocale = 0
								 AND n.PortalID = @PortalID
							 )
						END
						)
					)
				)
			END		
		END AS ''Count''
		FROM (
		SELECT  ncl.[CategoryID],
				ncl.[PortalID],
				ncl.[CategoryName],
				ncl.[Position],
				ncl.[ParentCategory],
				ncl.[Level],
				ncl.[CategoryURL],
				ncl.[CategoryImage],
				ncl.[CategoryText],
				ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
		FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
		ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
		ORDER BY Position ASC, ParentCategory ASC	
	END
	ELSE IF @FilterByDNNUserID <> 0
	BEGIN
		SELECT *,
		CASE Show
			WHEN 0 THEN 0
			WHEN 1 THEN	
				CASE @AdminOrSuperUser
				WHEN 1 THEN(
					SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n	 
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID AND c.CategoryID = Result.CategoryID
						INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					WHERE  n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
						AND n.PortalID = @PortalID
						AND n.HideDefaultLocale = 0
						AND n.UserID = @FilterByDNNUserID 
				)
				WHEN 0 THEN(
					SELECT ((
						SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
						WHERE n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							AND ((@UserCanApprove = 1) OR (n.Approved=1))
							AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							AND n.HasPermissions = 0
							AND n.HideDefaultLocale = 0
							AND n.PortalID = @PortalID
							AND n.UserID = @FilterByDNNUserID
						)+(
						SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
						WHERE ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
			 				AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							AND ((@UserCanApprove = 1) OR (n.Approved=1))
							AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							AND n.HasPermissions = 1
							AND n.HideDefaultLocale = 0
							AND n.PortalID = @PortalID
							AND n.UserID = @FilterByDNNUserID
						)+ (
						CASE @UserID
						WHEN -1 THEN 0
						ELSE(
							SELECT COUNT(PerRoles.[ArticleID]) FROM(
								SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
								WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
									AND arp.ArticleID NOT IN (
									SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
										INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
									WHERE aup.UserID = @UserID
					 					AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
										AND ((@UserCanApprove = 1) OR (n.Approved=1))
										AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
										AND n.HasPermissions = 1
										AND n.HideDefaultLocale = 0
										AND n.PortalID = @PortalID
										AND n.UserID = @FilterByDNNUserID 
			  					)
							 ) AS PerRoles 
							 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
							 WHERE n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							 AND ((@UserCanApprove = 1) OR (n.Approved=1))
							 AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							 AND n.HasPermissions = 1
							 AND n.HideDefaultLocale = 0
							 AND n.PortalID = @PortalID
							 AND n.UserID = @FilterByDNNUserID
						)
					END
					)
				)
			)
			END		
		END AS ''Count''
		FROM (
		SELECT ncl.[CategoryID],
			ncl.[PortalID],
			ncl.[CategoryName],
			ncl.[Position],
			ncl.[ParentCategory],
			ncl.[Level],
			ncl.[CategoryURL],
			ncl.[CategoryImage],
			ncl.[CategoryText],
			ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
		FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
		ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
		ORDER BY Position ASC, ParentCategory ASC
	END
END
ELSE
BEGIN
	IF @IsSocialInstance = 0
	BEGIN
		IF @CountArticles = 1 AND @CountEvents = 0 -- only articles
		BEGIN
			SELECT *,
			CASE Show
				WHEN 0 THEN 0
				WHEN 1 THEN	
					CASE @AdminOrSuperUser
					WHEN 1 THEN(
						SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
							LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
						WHERE n.PortalID = @PortalID
							AND n.EventArticle = 0
							AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))			 
							AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
					)
					WHEN 0 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.EventArticle = 0 
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
							)+(
							SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 1
								AND n.EventArticle = 0
				 				AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)	
								AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
							)+(
							CASE @UserID
								WHEN -1 THEN 0
								ELSE(
									SELECT COUNT(PerRoles.[ArticleID]) FROM(
										SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
											INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
											LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = arp.ArticleID AND ncl.LocaleCode = @LocaleCode
										WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
											AND arp.ArticleID NOT IN (
											SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
												LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
											WHERE n.PortalID = @PortalID
												AND n.HasPermissions = 1
												AND n.EventArticle = 0
												AND aup.UserID = @UserID
												AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
												AND ((@UserCanApprove = 1) OR (n.Approved=1))
												AND (n.Active=1 OR n.UserID=@UserID)
												AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
												AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
											) AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
										) AS PerRoles 
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
									WHERE n.PortalID = @PortalID
										AND n.HasPermissions = 1
										AND n.EventArticle = 0
										AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
										AND ((@UserCanApprove = 1) OR (n.Approved=1))
										AND (n.Active=1 OR n.UserID=@UserID)
										AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								)
								END
							)
						)
					)
				END		
			END AS ''Count''
			FROM (
			SELECT	ncl.[CategoryID],
					ncl.[PortalID],
					ncl.[CategoryName],
					ncl.[Position],
					ncl.[ParentCategory],
					ncl.[Level],
					ncl.[CategoryURL],
					ncl.[CategoryImage],
					ncl.[CategoryText],
					ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
			FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
			ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
			ORDER BY Position ASC, ParentCategory ASC
		END
		ELSE IF @CountEvents = 1 AND @CountArticles = 0 -- only events
		BEGIN
			SELECT *,
			CASE Show
				WHEN 0 THEN 0
				WHEN 1 THEN	
					CASE @AdminOrSuperUser
					WHEN 1 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.EventArticle = 1
								AND ne.Recurring = 0
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
							)+(
							SELECT COUNT([ArticleID]) AS cnt FROM
								(SELECT n.[ArticleID],nerd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 1
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
									CASE WHEN @CountEventsLimitByDays IS NOT NULL THEN -- @StartDate min value
										CASE WHEN ne.UpcomingOccurrences > 1
										THEN
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										ELSE
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										END
									ELSE -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
										CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
											THEN 1
											ELSE 0
										END
									END
									LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
								WHERE n.PortalID = @PortalID
									AND n.EventArticle = 1
									AND ne.Recurring = 1
									AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
									AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
									AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
								GROUP BY n.ArticleID, nerd.RecurringID) AS InnerCount)
						)
					)
					WHEN 0 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 0
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))		 
							)+(
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 1
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
								CASE WHEN @CountEventsLimitByDays IS NOT NULL THEN -- @StartDate min value
									CASE WHEN ne.UpcomingOccurrences > 1
										THEN
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										ELSE
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										END
								ELSE -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
									CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
										THEN 1
										ELSE 0
									END
								END	
							LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 1
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
							)+(
							SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 1
								AND n.EventArticle = 1
								AND ne.Recurring = 0
				 				AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
				 				AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)	
								AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
							)+(
							CASE @UserID
								WHEN -1 THEN 0
								ELSE(
									SELECT COUNT(PerRoles.[ArticleID]) FROM(
										SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
											INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
											LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = arp.ArticleID AND ncl.LocaleCode = @LocaleCode
										WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
											AND arp.ArticleID NOT IN (
											SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
												LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
											WHERE n.PortalID = @PortalID
												AND n.HasPermissions = 1
												AND n.EventArticle = 1
												AND ne.Recurring = 0
												AND aup.UserID = @UserID
												AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
												AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
												AND ((@UserCanApprove = 1) OR (n.Approved=1))
												AND (n.Active=1 OR n.UserID=@UserID)
												AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
												AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
											) AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
										) AS PerRoles 
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
									WHERE n.PortalID = @PortalID
										AND n.HasPermissions = 1
										AND n.EventArticle = 1
										AND ne.Recurring = 0
										AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
										AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
										AND ((@UserCanApprove = 1) OR (n.Approved=1))
										AND (n.Active=1 OR n.UserID=@UserID)
										AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								)
								END
							)
						)
					)
				END		
			END AS ''Count''
			FROM (
			SELECT	ncl.[CategoryID],
					ncl.[PortalID],
					ncl.[CategoryName],
					ncl.[Position],
					ncl.[ParentCategory],
					ncl.[Level],
					ncl.[CategoryURL],
					ncl.[CategoryImage],
					ncl.[CategoryText],
					ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
			FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
			ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
			ORDER BY Position ASC, ParentCategory ASC
		END
		ELSE -- articles and events
		BEGIN
			SELECT *,
			CASE Show
				WHEN 0 THEN 0
				WHEN 1 THEN	
					CASE @AdminOrSuperUser
					WHEN 1 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.EventArticle = 0
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))		 
							)+(
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HideDefaultLocale = 0
								AND n.EventArticle = 1
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))		 
							)+(
							SELECT COUNT([ArticleID]) AS cnt FROM
								(SELECT n.[ArticleID],nerd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 1
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
									CASE WHEN @CountEventsLimitByDays IS NOT NULL THEN -- @StartDate min value
										CASE WHEN ne.UpcomingOccurrences > 1
										THEN
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										ELSE
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										END
									ELSE -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
										CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
											THEN 1
											ELSE 0
										END
									END
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
								WHERE n.PortalID = @PortalID
									AND n.EventArticle = 1
									AND ne.Recurring = 1
									AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
									AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
									AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))		 
								GROUP BY n.ArticleID, nerd.RecurringID) AS InnerCount)
						)
					)
					WHEN 0 THEN(
						SELECT ((
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.EventArticle = 0 
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))		 
							)+(
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 0
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 0
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND (@CountEventsLimitByDays IS NULL OR ne.StartDate >= @StartDate)
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))		 
							)+(
							SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = n.ArticleID AND ne.Recurring = 1
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
								CASE WHEN @CountEventsLimitByDays IS NOT NULL THEN -- @StartDate min value
									CASE WHEN ne.UpcomingOccurrences > 1
										THEN
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										ELSE
											CASE WHEN ((nerd.StartDateTime >= @StartDate AND nerd.StartDateTime <= @CurrentDate) OR
													  (nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.RecurringID)))
												THEN 1
												ELSE 0
											END
										END
								ELSE -- Show all ali treba uzeti u obzir ogranicenje UpcomingOccurrences
									CASE WHEN nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY RecurringID)
										THEN 1
										ELSE 0
									END
								END
							LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 0
								AND n.EventArticle = 1
								AND ne.Recurring = 1
								AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
							)+(
							SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
							WHERE n.PortalID = @PortalID
								AND n.HasPermissions = 1
								AND n.EventArticle = 0
				 				AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
								AND ((@UserCanApprove = 1) OR (n.Approved=1))
								AND (n.Active=1 OR n.UserID=@UserID)	
								AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
								AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
							)+(
							CASE @UserID
								WHEN -1 THEN 0
								ELSE(
									SELECT COUNT(PerRoles.[ArticleID]) FROM(
										SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
											INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
											LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = arp.ArticleID
										WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
											AND arp.ArticleID NOT IN (
											SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
												INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
												LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
											WHERE n.PortalID = @PortalID
												AND n.HasPermissions = 1
												AND n.EventArticle = 0
												AND aup.UserID = @UserID
												AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
												AND ((@UserCanApprove = 1) OR (n.Approved=1))
												AND (n.Active=1 OR n.UserID=@UserID)
												AND ((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
												AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
											) AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
										) AS PerRoles 
										INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
									WHERE n.PortalID = @PortalID
										AND n.HasPermissions = 1
										AND n.EventArticle = 0
										AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
										AND ((@UserCanApprove = 1) OR (n.Approved=1))
										AND (n.Active=1 OR n.UserID=@UserID)
										AND((@FilterAuthorOrAuthors = 1 AND n.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
								)
								END
							)
						)
					)
				END		
			END AS ''Count''
			FROM (
			SELECT	ncl.[CategoryID],
					ncl.[PortalID],
					ncl.[CategoryName],
					ncl.[Position],
					ncl.[ParentCategory],
					ncl.[Level],
					ncl.[CategoryURL],
					ncl.[CategoryImage],
					ncl.[CategoryText],
					ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
			FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
			ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
			ORDER BY Position ASC, ParentCategory ASC
		END
	END
	ELSE IF @FilterBySocialGroup = 1
	BEGIN
		SELECT *,
		CASE Show
			WHEN 0 THEN 0
			WHEN 1 THEN	
				CASE @AdminOrSuperUser
				WHEN 1 THEN(
					SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = n.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
						INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
						LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
					WHERE n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
						AND n.PortalID = @PortalID
						AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				)
				WHEN 0 THEN(
					SELECT ((
						SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = n.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
							INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
							LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
						WHERE n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							 AND ((@UserCanApprove = 1) OR (n.Approved=1))
							 AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							 AND n.HasPermissions = 0
							 AND n.PortalID = @PortalID
							 AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
						)+(
						SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = n.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
							INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
							LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
						WHERE ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
				 			AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							AND ((@UserCanApprove = 1) OR (n.Approved=1))
							AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							AND n.HasPermissions = 1
							AND n.PortalID = @PortalID
							AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
						)+ (
						CASE @UserID
						WHEN -1 THEN 0
						ELSE(
						SELECT COUNT(PerRoles.[ArticleID]) FROM(
							SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = arp.ArticleID
							WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
								AND arp.ArticleID NOT IN (
								SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = n.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
									INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
									LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID AND ncl.LocaleCode = @LocaleCode
								WHERE aup.UserID = @UserID
				 					AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
									AND ((@UserCanApprove = 1) OR (n.Approved=1))
									AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
									AND n.HasPermissions = 1
									AND n.PortalID = @PortalID
									AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
								) AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
							 ) AS PerRoles 
							 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
							 WHERE n.PublishDate <= @CurrentDate
							 AND n.[ExpireDate] >= @CurrentDate
							 AND ((@UserCanApprove = 1) OR (n.Approved=1))
							 AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							 AND n.HasPermissions = 1
							 AND n.PortalID = @PortalID
						)
					END
					)
				)
			)
			END		
		END AS ''Count''
		FROM (
		SELECT ncl.[CategoryID],
			ncl.[PortalID],
			ncl.[CategoryName],
			ncl.[Position],
			ncl.[ParentCategory],
			ncl.[Level],
			ncl.[CategoryURL],
			ncl.[CategoryImage],
			ncl.[CategoryText],
			ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
		FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
		ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
		ORDER BY Position ASC, ParentCategory ASC	
	END
	ELSE IF @FilterByDNNUserID <> 0
	BEGIN
		SELECT *,
		CASE Show
			WHEN 0 THEN 0
			WHEN 1 THEN	
				CASE @AdminOrSuperUser
				WHEN 1 THEN(
					SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n	 
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
						INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
						LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
					WHERE n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
						AND n.PortalID = @PortalID
						AND n.UserID = @FilterByDNNUserID 
						AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				)
				WHEN 0 THEN(
					SELECT ((
						SELECT COUNT(n.[ArticleID]) AS cnt FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID AND c.CategoryID = Result.CategoryID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
							LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
						WHERE n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							AND ((@UserCanApprove = 1) OR (n.Approved=1))
							AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							AND n.HasPermissions = 0
							AND n.PortalID = @PortalID
							AND n.UserID = @FilterByDNNUserID
							AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
						)+(
						SELECT COUNT(aup.[ArticleID]) FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
							INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
							LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
						WHERE ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
							AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
							AND ((@UserCanApprove = 1) OR (n.Approved=1))
							AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							AND n.HasPermissions = 1
							AND n.PortalID = @PortalID
							AND n.UserID = @FilterByDNNUserID
							AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
						)+ (
						CASE @UserID
						WHEN -1 THEN 0
						ELSE(
						SELECT COUNT(PerRoles.[ArticleID]) FROM(
							SELECT DISTINCT arp.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
								INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = arp.ArticleID AND c.CategoryID = Result.CategoryID
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = arp.ArticleID
							WHERE arp.RoleID IN (SELECT RoleID FROM @UserInRoles)
								AND arp.ArticleID NOT IN (
								SELECT aup.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.ArticleID = aup.ArticleID AND c.CategoryID = Result.CategoryID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = aup.ArticleID
									INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = n.ArticleID
									INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
									LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID
								WHERE aup.UserID = @UserID
				 					AND n.PublishDate <= @CurrentDate AND n.[ExpireDate] >= @CurrentDate
									AND ((@UserCanApprove = 1) OR (n.Approved=1))
									AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
									AND n.HasPermissions = 1
									AND n.PortalID = @PortalID
									AND n.UserID = @FilterByDNNUserID 
									AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			  					) AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
							 ) AS PerRoles 
							 INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNews] AS n ON n.ArticleID = PerRoles.ArticleID
							 WHERE n.PublishDate <= @CurrentDate
							 AND n.[ExpireDate] >= @CurrentDate
							 AND ((@UserCanApprove = 1) OR (n.Approved=1))
							 AND ((@AdminOrSuperUser = 1) OR (n.Active=1 OR n.UserID=@UserID))
							 AND n.HasPermissions = 1
							 AND n.PortalID = @PortalID
							 AND n.UserID = @FilterByDNNUserID
						)
					END
					)
				)
			)
		END		
		END AS ''Count''
		FROM (
		SELECT ncl.[CategoryID],
				ncl.[PortalID],
				ncl.[CategoryName],
				ncl.[Position],
				ncl.[ParentCategory],
				ncl.[Level],
				ncl.[CategoryURL],
				ncl.[CategoryImage],
				ncl.[CategoryText],
				ncl.Show,
			CASE WHEN cl.[NewsModuleID] IS NULL THEN @DefaultModuleID ELSE cl.[NewsModuleID] END AS NewsModuleID,
			CASE WHEN tm.[TabID] IS NULL THEN @DefaultTabID ELSE tm.[TabID] END AS TabID
		FROM @tempMenuCats AS ncl LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS cl
		ON ncl.CategoryID = cl.CategoryID AND cl.[SourceModuleID] = @MenuModuleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON cl.NewsModuleID = tm.ModuleID) AS Result
		ORDER BY Position ASC, ParentCategory ASC
	END
END
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]
	@PortalID INT,
	@UserID INT,
	@CalendarModuleID INT,
	@RowCount INT,
	@AdminOrSuperUser BIT  = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@ShowAllAuthors BIT = 1, -- filter postavka menija
	@CategoryFilterType TINYINT = 0, --0 All categories, 1 - SELECTion, 2 - AutoAdd
	@PermissionSettingsSource TINYINT = 0, -- None, 1 - portal, 2 - module
	@PermissionsModuleID INT = 0, -- NewsModuleID
	@HideUnlocalizedItems BIT = 0
AS
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @UserCanApprove BIT;
SET @UserCanApprove = 0;
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal

DECLARE @SettingsSource BIT; SET @SettingsSource = 1;
IF @AdminOrSuperUser = 1 OR @PermissionSettingsSource = 0
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL;
			END
		END
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
			END
		END
		ELSE
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID GROUP BY upsc.[CategoryID];
			END
		END
	END
END

IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
	INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
BEGIN
		INSERT INTO @UserViewCategoriesWithFilter 
		SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @CalendarModuleID
		
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID;
END
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	WITH hierarchy AS(
		SELECT [CategoryID], [ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID)) AND PortalID = @PortalID
		UNION ALL
		SELECT c.[CategoryID], c.[ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
		)
		INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
		INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @IsSocialInstance = 1
BEGIN
	IF @FilterByDNNGroupID <> 0
	BEGIN	
		SET @FilterBySocialGroup = 1;
	END
END
ELSE
BEGIN
	IF @ShowAllAuthors = 0
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @CalendarModuleID
		UNION 
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @CalendarModuleID
	END
END

IF @RowCount = 0 OR @RowCount > 100
BEGIN
	SET @RowCount = 100;
END

IF @IsSocialInstance = 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS (
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate) 
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = 
					CASE WHEN ne.UpcomingOccurrences > 1
					THEN
						CASE WHEN ((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.RecurringID)) OR
								(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					ELSE
						CASE WHEN ((ne.StartDate >= @CurrentDate AND nerd.RecurringID = 1) OR
								(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					END
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)  
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)  
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords) AS (
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT TOP (@RowCount) * FROM (
		SELECT Result.*,
			CASE WHEN ne.Recurring = 1 THEN nerd.StartDateTime ELSE ne.StartDate END AS ''StartDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.EndDateTime ELSE ne.EndDate END AS ''EndDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID'',
			ne.WhloeDay,ne.ShowEndDate,
		(SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection]  AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
		AS ''GoogleMapData'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
		AS ''CssCategoryClasses'',ne.Recurring
		FROM (
			SELECT na.ArticleID,na.UserId,na.PublishDate, na.Title, na.TitleLink, na.ArticleImage, na.Summary, na.Article
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na WHERE na.ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
			UNION ALL
			SELECT na.ArticleID,na.UserId, na.PublishDate, fla.Title, fla.TitleLink, na.ArticleImage, fla.Summary, fla.Article
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = na.ArticleID
		) As Result
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON Result.ArticleID = ne.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON (ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
		CASE WHEN ne.UpcomingOccurrences > 1
		THEN
			CASE WHEN ((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.RecurringID)) OR
					(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.RecurringID)))
				THEN 1
				ELSE 0
			END
		ELSE
			CASE WHEN ((ne.StartDate >= @CurrentDate AND nerd.RecurringID = 1) OR
					(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.RecurringID)))
				THEN 1
				ELSE 0
			END
		END
		)) AS ResultFinal
		 ORDER BY StartDate;
	END
	ELSE
	BEGIN
		SELECT TOP (@RowCount) *,
		(SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN  {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection]  AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
		AS ''GoogleMapData'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
		AS ''CssCategoryClasses''
		FROM (
			SELECT na.ArticleID, na.UserID, na.PublishDate, na.Title, na.TitleLink, na.ArticleImage, na.Summary, na.Article,
			CASE WHEN ne.Recurring = 1 THEN nerd.StartDateTime ELSE ne.StartDate END AS ''StartDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.EndDateTime ELSE ne.EndDate END AS ''EndDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID'',
			  ne.WhloeDay,ne.ShowEndDate FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
				CASE WHEN ne.UpcomingOccurrences > 1
				THEN
					CASE WHEN ((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.RecurringID)) OR
							(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.RecurringID)))
						THEN 1
						ELSE 0
					END
				ELSE
					CASE WHEN ((ne.StartDate >= @CurrentDate AND nerd.RecurringID = 1) OR
							(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.RecurringID)))
						THEN 1
						ELSE 0
					END
				END
			WHERE na.ArticleID IN (
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				GROUP BY na.ArticleID
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 =
					CASE WHEN ne.UpcomingOccurrences > 1
					THEN
						CASE WHEN ((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.RecurringID)) OR
								(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					ELSE
						CASE WHEN ((ne.StartDate >= @CurrentDate AND nerd.RecurringID = 1) OR
								(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(1) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.RecurringID)))
							THEN 1
							ELSE 0
						END
					END
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				GROUP BY na.ArticleID
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND ((@UserID = -1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				GROUP BY na.ArticleID
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				GROUP BY na.ArticleID
			)
		) AS Result ORDER BY StartDate;
	END
END
ELSE IF @FilterBySocialGroup = 1
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				GROUP BY na.ArticleID
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				GROUP BY na.ArticleID
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				GROUP BY na.ArticleID
			)
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT TOP (@RowCount) Result.*, ne.StartDate, ne.EndDate, ne.WhloeDay, ne.ShowEndDate, NULL AS ''RecurringID'',
		(SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
		AS ''GoogleMapData'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
		AS ''CssCategoryClasses''
		FROM (
			SELECT na.ArticleID,na.UseriD, na.PublishDate, na.Title, na.TitleLink, na.ArticleImage, na.Summary, na.Article
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na WHERE na.ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
			UNION ALL
			SELECT na.ArticleID,na.UserID, na.PublishDate, fla.Title, fla.TitleLink, na.ArticleImage, fla.Summary, fla.Article
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = na.ArticleID
		) As Result INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on Result.ArticleID = ne.ArticleID ORDER BY ne.StartDate;
	END
	ELSE
	BEGIN
		SELECT TOP (@RowCount) *, NULL AS ''RecurringID'',
		(SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN  {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection]  AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
		AS ''GoogleMapData'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
		AS ''CssCategoryClasses''
		FROM (
			SELECT na.ArticleID,na.UserID, na.PublishDate, na.Title, na.TitleLink, na.ArticleImage, na.Summary,na.Article, na.EventArticle, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
			WHERE na.ArticleID IN (
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
				GROUP BY na.ArticleID
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					GROUP BY na.ArticleID
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
				GROUP BY na.ArticleID
			)
		) AS Result ORDER BY StartDate;
	END
END
ELSE IF @FilterByDNNUserID <> 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						(@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				GROUP BY na.ArticleID
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				GROUP BY na.ArticleID
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles) ))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				GROUP BY na.ArticleID
				)
			),
			FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords) AS(
				SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
			)
			SELECT TOP (@RowCount) Result.*, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate, NULL AS ''RecurringID'',
			(SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN  {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection]  AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			AS ''GoogleMapData'',
			(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
			AS ''CssCategoryClasses''
			FROM (
				SELECT na.ArticleID,na.UserID, na.PublishDate, na.Title, na.TitleLink, na.ArticleImage, na.Summary, na.Article
					   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na WHERE na.ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				UNION ALL
				SELECT na.ArticleID,na.UserID, na.PublishDate, fla.Title, fla.TitleLink, na.ArticleImage, fla.Summary, fla.Article
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = na.ArticleID
			) As Result INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on Result.ArticleID = ne.ArticleID ORDER BY ne.StartDate;
	END
	ELSE
	BEGIN
		SELECT TOP (@RowCount) *, NULL AS ''RecurringID'',
		(SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN  {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection]  AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
		AS ''GoogleMapData'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
		AS ''CssCategoryClasses''
		FROM (
			SELECT na.ArticleID,na.UserID, na.PublishDate, na.Title, na.TitleLink, na.ArticleImage, na.Summary,na.Article, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
			WHERE na.ArticleID IN (
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						(@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND na.UserID = @FilterByDNNUserID
				GROUP BY na.ArticleID
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND na.UserID = @FilterByDNNUserID
				GROUP BY na.ArticleID
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles) ))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)		
					AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate))
					AND na.UserID = @FilterByDNNUserID
				GROUP BY na.ArticleID
			)
		) AS Result ORDER BY StartDate;
	END
END' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetEvents]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetEvents]
	@PortalID INT,
	@UserID INT,
	@CalendarModuleID INT,
	@AdminOrSuperUser BIT = 0,
	@FromDate DATETIME = NULL, -- articles
	@ToDate DATETIME = NULL,
	@eFromDate DATETIME = NULL, -- events
	@eToDate DATETIME = NULL,
	@DisplayType TINYINT = 0, -- 0 - ByStartDate, 1 - ByPublishDate , 2 - ByStartDateOrPublishDate
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@ShowAllAuthors BIT = 1, -- filter postavka menija
	@CategoryFilterType TINYINT = 0, --0 All categories, 1 - SELECTion, 2 - AutoAdd
	@HideUnlocalizedItems BIT = 0,
	@PermissionSettingsSource TINYINT = 0, -- None, 1 - portal, 2 - module
	@PermissionsModuleID INT = 0 -- NewsModuleID
AS
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @UserCanApprove BIT;
SET @UserCanApprove = 0;
DECLARE @UserInRoles table (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories table (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based ON permissions
DECLARE @UserViewCategoriesWithFilter table (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based ON permissions and Module filter
DECLARE @FiltredByCategories table (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal

DECLARE @SettingsSource BIT; SET @SettingsSource = 1;
IF @AdminOrSuperUser = 1 OR @PermissionSettingsSource = 0
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL;
			END
		END
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
			END
		END
		ELSE
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID GROUP BY upsc.[CategoryID];
			END
		END
	END
END

IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
	INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
BEGIN
		INSERT INTO @UserViewCategoriesWithFilter 
		SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @CalendarModuleID
		
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID;
END
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	WITH hierarchy AS(
		SELECT [CategoryID], [ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID)) AND PortalID = @PortalID
		UNION ALL
		SELECT c.[CategoryID], c.[ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
		)
		INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
		INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList table (UserID INT NOT NULL PRIMARY KEY);
IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
		END
	END
ELSE
BEGIN
	IF @ShowAllAuthors = 0
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @CalendarModuleID
		UNION 
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @CalendarModuleID
	END
END

IF @IsSocialInstance = 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 0
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 1
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1
					AND 1 = CASE WHEN
								(@DisplayType = 0 AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate) OR
								(@DisplayType = 1 AND nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR
								(@DisplayType = 2 AND ((nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)))
							THEN 1
							ELSE 0
							END
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						) 
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				)
			),
			FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
				SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
			)
		SELECT *, StartDate AS ''CombinedOrderBy'' FROM (
		SELECT Result.*,
			CASE WHEN ne.Recurring = 1 THEN nerd.StartDateTime ELSE ne.StartDate END AS ''StartDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.EndDateTime ELSE ne.EndDate END AS ''EndDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID'',
			ne.WhloeDay,ne.ShowEndDate,
			(SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID = Result.ArticleID)
			AS ''GoogleMapData'',
			(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
			AS ''CssCategoryClasses''
			FROM (
				SELECT n.[ArticleID],n.[Title],n.[SubTitle],n.[Summary],n.[ArticleImage],n.[PublishDate],n.[TitleLink],n.[EventArticle]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				UNION ALL
				SELECT n.[ArticleID],fla.[Title],fla.[SubTitle],fla.[Summary],n.[ArticleImage],n.[PublishDate],fla.[TitleLink],n.[EventArticle]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID
			) As Result
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON Result.ArticleID = ne.ArticleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON (ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1
			 AND 1= CASE WHEN
						(@DisplayType = 0 AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate) OR
						(@DisplayType = 1 AND nerd.RecurringID = 1 AND Result.PublishDate >= @FromDate AND Result.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((nerd.RecurringID = 1 AND Result.PublishDate >= @FromDate AND Result.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)))
					THEN 1
					ELSE 0
					END
			 )) AS ResultFinal
		 ORDER BY CombinedOrderBy;
	END
	ELSE
	BEGIN
		SELECT
		Result.[ArticleID],Result.[RecurringID],Result.[Title],Result.[SubTitle],Result.[Summary],Result.[ArticleImage],Result.[PublishDate],Result.[TitleLink],Result.[EventArticle],
		Result.StartDate, Result.EndDate,Result.WhloeDay,Result.ShowEndDate,
		(SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID = Result.ArticleID)
		AS ''GoogleMapData'',
		Result.StartDate AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
		AS ''CssCategoryClasses''
		FROM (SELECT n.[ArticleID],n.[Title],n.[SubTitle],n.[Summary],n.[ArticleImage],n.[PublishDate],n.[TitleLink],n.[EventArticle],ne.WhloeDay,ne.ShowEndDate,
			CASE WHEN ne.Recurring = 1 THEN nerd.StartDateTime ELSE ne.StartDate END AS ''StartDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.EndDateTime ELSE ne.EndDate END AS ''EndDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID''
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON n.ArticleID = ne.ArticleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1
			 AND 1 = CASE WHEN
						(@DisplayType = 0 AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate) OR
						(@DisplayType = 1 AND nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)))
					THEN 1
					ELSE 0
					END
			 WHERE n.ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 0
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						) 
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION ALL
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 1
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1
					AND 1 = CASE WHEN
							(@DisplayType = 0 AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate) OR
							(@DisplayType = 1 AND nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR
							(@DisplayType = 2 AND ((nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)))
							THEN 1
							ELSE 0
							END
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 0
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate  
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						) 
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 0
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						) 
					AND((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				)
		 ) AS Result ORDER BY CombinedOrderBy;
	END
END
ELSE IF @FilterBySocialGroup = 1
	BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						(@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)

		SELECT Result.*,NULL AS ''RecurringID'', ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate,
		CASE Result.EventArticle
			WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			WHEN 0 THEN ''''
		END AS ''GoogleMapData'',
		CASE Result.EventArticle
			WHEN 1 THEN ne.StartDate
			WHEN 0 THEN Result.PublishDate
		END AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
		FROM (
		SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
			  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
			  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
			  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
			  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
			  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription]
			   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
		UNION ALL
		SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
			  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
			  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
			  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
			  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
			  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID
		) As Result LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON Result.ArticleID = ne.ArticleID ORDER BY CombinedOrderBy;
	END
	ELSE
	BEGIN
		SELECT
		Result.[ArticleID],NULL AS ''RecurringID'',Result.[UserID],Result.[Title],Result.[SubTitle],Result.[Summary],Result.[Article],Result.[ArticleImage],Result.[DateAdded],Result.[LastModified],Result.[PublishDate]
		,Result.[ExpireDate],Result.[Approved],Result.[Featured],Result.[NumberOfViews],Result.[RatingValue],Result.[RatingCount],Result.[AllowComments],Result.[Active]
		,Result.[TitleLink],Result.[DetailType],Result.[DetailTypeData],Result.[DetailsTemplate],Result.[DetailsTheme],Result.[GalleryPosition],Result.[GalleryDisplayType]
		,Result.[ShowMainImage],Result.[ShowMainImageFront],Result.[CommentsTheme],Result.[ArticleImageFolder],Result.[NumberOfComments]
		,Result.[ArticleImageSet],Result.[MetaDecription],Result.[MetaKeywords],Result.[DisplayStyle],Result.[DetailTarget]
		,Result.[ArticleFromRSS],Result.[HasPermissions],Result.[EventArticle],Result.[DetailMediaType],Result.[DetailMediaData],Result.[AuthorAliasName],Result.[ShowGallery],Result.[ArticleGalleryID],Result.[MainImageTitle],Result.[MainImageDescription],
		Result.StartDate, Result.EndDate,Result.WhloeDay,Result.ShowEndDate,
		CASE Result.EventArticle
			WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			WHEN 0 THEN ''''
		END AS ''GoogleMapData'',
		CAST (CASE Result.EventArticle
			WHEN 1 THEN Result.StartDate
			WHEN 0 THEN Result.PublishDate
		END AS DATETIME ) AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
		FROM (SELECT n.*, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON n.ArticleID = ne.ArticleID WHERE n.ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1  		   
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1))AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
			)
		) AS Result ORDER BY CombinedOrderBy;
	END
END
ELSE IF @FilterByDNNUserID <> 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1)AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1		   
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				)
			),
			FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
				SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
			)
			SELECT Result.*,NULL AS ''RecurringID'', ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate,
			CASE Result.EventArticle
				WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
				WHEN 0 THEN ''''
			END AS ''GoogleMapData'',
			CASE Result.EventArticle
				WHEN 1 THEN ne.StartDate
				WHEN 0 THEN Result.PublishDate
			END AS ''CombinedOrderBy'',
			(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
			FROM (
			SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
				  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
				  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
				  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
				  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription]
				   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
			UNION ALL
			SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
				  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
				  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
				  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
				  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID
			) As Result LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON Result.ArticleID = ne.ArticleID ORDER BY CombinedOrderBy;
	END
	ELSE
	BEGIN
		SELECT
		Result.[ArticleID],NULL AS ''RecurringID'',Result.[UserID],Result.[Title],Result.[SubTitle],Result.[Summary],Result.[Article],Result.[ArticleImage],Result.[DateAdded],Result.[LastModified],Result.[PublishDate]
		,Result.[ExpireDate],Result.[Approved],Result.[Featured],Result.[NumberOfViews],Result.[RatingValue],Result.[RatingCount],Result.[AllowComments],Result.[Active]
		,Result.[TitleLink],Result.[DetailType],Result.[DetailTypeData],Result.[DetailsTemplate],Result.[DetailsTheme],Result.[GalleryPosition],Result.[GalleryDisplayType]
		,Result.[ShowMainImage],Result.[ShowMainImageFront],Result.[CommentsTheme],Result.[ArticleImageFolder],Result.[NumberOfComments]
		,Result.[ArticleImageSet],Result.[MetaDecription],Result.[MetaKeywords],Result.[DisplayStyle],Result.[DetailTarget]
		,Result.[ArticleFromRSS],Result.[HasPermissions],Result.[EventArticle],Result.[DetailMediaType],Result.[DetailMediaData],Result.[AuthorAliasName],Result.[ShowGallery],Result.[ArticleGalleryID],Result.[MainImageTitle],Result.[MainImageDescription],
		Result.StartDate, Result.EndDate,Result.WhloeDay,Result.ShowEndDate,
		CASE Result.EventArticle
			WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			WHEN 0 THEN ''''
		END AS ''GoogleMapData'',
		CAST (CASE Result.EventArticle
			WHEN 1 THEN Result.StartDate
			WHEN 0 THEN Result.PublishDate
		END AS DATETIME ) AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
		FROM (SELECT n.*, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON n.ArticleID = ne.ArticleID WHERE n.ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1  
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND (
					(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
					(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
					(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
					)
				AND na.UserID = @FilterByDNNUserID
			UNION ALL
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (
					((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND (
					(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
					(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
					(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
					)
				AND na.UserID = @FilterByDNNUserID
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (
					((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND (na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate)
				AND (
					(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
					(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
					(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
					)
				AND na.UserID = @FilterByDNNUserID
			)
		) AS Result ORDER BY CombinedOrderBy;		
	END
END' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetArticles]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetArticles]
	@PortalID INT,
	@UserID INT,
	@CalendarModuleID INT,
	@AdminOrSuperUser BIT = 0,
	@FromDate DATETIME = NULL, -- articles
	@ToDate DATETIME = NULL,
	@eFromDate DATETIME = NULL, -- events
	@eToDate DATETIME = NULL,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@ShowAllAuthors BIT = 1, -- filter postavka menija
	@CategoryFilterType TINYINT = 0, --0 All categories, 1 - SELECTion, 2 - AutoAdd
	@HideUnlocalizedItems BIT = 0,
	@PermissionSettingsSource TINYINT = 0, -- None, 1 - portal, 2 - module
	@PermissionsModuleID INT = 0 -- NewsModuleID
AS
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @UserCanApprove BIT;
SET @UserCanApprove = 0;
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal

DECLARE @SettingsSource BIT; SET @SettingsSource = 1;
IF @AdminOrSuperUser = 1 OR @PermissionSettingsSource = 0
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] as rpsc 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] as rpsc 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] as rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL;
			END
		END
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps
					INNER JOIN @UserInRoles as uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] as ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] as rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles as uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] as upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] as ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps
					INNER JOIN @UserInRoles as uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] as ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] as rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles as uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] as upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] as ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
			END
		END
		ELSE
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps
					INNER JOIN @UserInRoles as uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] as ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] as rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] as rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles as uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] as upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] as ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID GROUP BY upsc.[CategoryID];
			END
		END
	END
END

IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
	INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
BEGIN
		INSERT INTO @UserViewCategoriesWithFilter 
		SELECT cl.[CategoryID] FROM @UserViewCategories as cl
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @CalendarModuleID
		
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID;
END
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	WITH hierarchy AS(
		SELECT [CategoryID], [ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID)) AND PortalID = @PortalID
		UNION ALL
		SELECT c.[CategoryID], c.[ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
		)
		INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
		INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories as nfc INNER JOIN @UserViewCategories as uvc ON uvc.CategoryID = nfc.CategoryID;
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
		END
	END
ELSE
BEGIN
	IF @ShowAllAuthors = 0
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @CalendarModuleID
		UNION 
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @CalendarModuleID
	END
END

/*** Category name to css class name ***/
-- create category id name temp table if needed

IF @IsSocialInstance = 0
BEGIN
IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter as uvcwf ON uvcwf.CategoryID = cat.CategoryID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved = 1)AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0	 
					AND na.EventArticle = 0  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate  
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] as aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate  
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] as arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))	 
			)
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			 SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT Result.*,
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
		AS ''CssCategoryClasses''
		FROM (
			SELECT n.[ArticleID],n.[Title],n.[SubTitle],n.[Summary],n.[ArticleImage],n.[PublishDate],n.[TitleLink],n.[EventArticle]
				   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
			UNION ALL
			SELECT n.[ArticleID],fla.[Title],fla.[SubTitle],fla.[Summary],n.[ArticleImage],n.[PublishDate],fla.[TitleLink],n.[EventArticle]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID
		) As Result ORDER BY Result.PublishDate;
	END
	ELSE
	BEGIN
		SELECT Result.*,
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
		 AS ''CssCategoryClasses''
		FROM (SELECT n.[ArticleID],n.[Title],n.[SubTitle],n.[Summary],n.[ArticleImage],n.[PublishDate],n.[TitleLink],n.[EventArticle]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as n WHERE n.ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter as uvcwf ON uvcwf.CategoryID = cat.CategoryID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved = 1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0	
					AND na.EventArticle = 0 	   
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate  
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] as aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] as arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate  
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				)
		 ) AS Result ORDER BY Result.PublishDate;
	END
END
ELSE IF @FilterBySocialGroup = 1
BEGIN
IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter as uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved = 1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] as aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] as arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT Result.*, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate,
		 CASE Result.EventArticle
			WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] as md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] as mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			WHEN 0 THEN ''''
		 END AS ''GoogleMapData'',
		 CASE Result.EventArticle
			WHEN 1 THEN ne.StartDate
			WHEN 0 THEN Result.PublishDate
		 END AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
		 FROM (
			SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
				  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
				  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
				  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
				  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription]
				   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
			UNION ALL
			SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
				  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
				  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
				  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
				  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID
		) As Result LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on Result.ArticleID = ne.ArticleID ORDER BY CombinedOrderBy;
	END
	ELSE
	BEGIN
		SELECT
		Result.[ArticleID],Result.[UserID],Result.[Title],Result.[SubTitle],Result.[Summary],Result.[Article],Result.[ArticleImage],Result.[DateAdded],Result.[LastModified],Result.[PublishDate]
		,Result.[ExpireDate],Result.[Approved],Result.[Featured],Result.[NumberOfViews],Result.[RatingValue],Result.[RatingCount],Result.[AllowComments],Result.[Active]
		,Result.[TitleLink],Result.[DetailType],Result.[DetailTypeData],Result.[DetailsTemplate],Result.[DetailsTheme],Result.[GalleryPosition],Result.[GalleryDisplayType]
		,Result.[ShowMainImage],Result.[ShowMainImageFront],Result.[CommentsTheme],Result.[ArticleImageFolder],Result.[NumberOfComments]
		,Result.[ArticleImageSet],Result.[MetaDecription],Result.[MetaKeywords],Result.[DisplayStyle],Result.[DetailTarget]
		,Result.[ArticleFromRSS],Result.[HasPermissions],Result.[EventArticle],Result.[DetailMediaType],Result.[DetailMediaData],Result.[AuthorAliasName],Result.[ShowGallery],Result.[ArticleGalleryID],Result.[MainImageTitle],Result.[MainImageDescription],
		 Result.StartDate, Result.EndDate,Result.WhloeDay,Result.ShowEndDate,
		 CASE Result.EventArticle
			WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] as md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] as mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			WHEN 0 THEN ''''
		 END AS ''GoogleMapData'',
		 CAST (CASE Result.EventArticle
			WHEN 1 THEN Result.StartDate
			WHEN 0 THEN Result.PublishDate
		 END AS DATETIME ) AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
		FROM (SELECT n.*, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as n LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] as ne on n.ArticleID = ne.ArticleID WHERE n.ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter as uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved = 1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate  
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] as aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] as arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
			)
		 ) AS Result  ORDER BY CombinedOrderBy;
	END
END
ELSE IF @FilterByDNNUserID <> 0
BEGIN
IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter as uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved = 1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] as aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1  AND ((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] as arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT Result.*, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate,
		 CASE Result.EventArticle
			WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] as md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] as mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			WHEN 0 THEN ''''
		 END AS ''GoogleMapData'',
		 CASE Result.EventArticle
			WHEN 1 THEN ne.StartDate
			WHEN 0 THEN Result.PublishDate
		 END AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
		 FROM (
			SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
				  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
				  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
				  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
				  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription]
				   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
			UNION ALL
			SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
				  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
				  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
				  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
				  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID
		) As Result LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on Result.ArticleID = ne.ArticleID ORDER BY CombinedOrderBy;
	END
	ELSE
	BEGIN
		SELECT
		Result.[ArticleID],Result.[UserID],Result.[Title],Result.[SubTitle],Result.[Summary],Result.[Article],Result.[ArticleImage],Result.[DateAdded],Result.[LastModified],Result.[PublishDate]
		,Result.[ExpireDate],Result.[Approved],Result.[Featured],Result.[NumberOfViews],Result.[RatingValue],Result.[RatingCount],Result.[AllowComments],Result.[Active]
		,Result.[TitleLink],Result.[DetailType],Result.[DetailTypeData],Result.[DetailsTemplate],Result.[DetailsTheme],Result.[GalleryPosition],Result.[GalleryDisplayType]
		,Result.[ShowMainImage],Result.[ShowMainImageFront],Result.[CommentsTheme],Result.[ArticleImageFolder],Result.[NumberOfComments]
		,Result.[ArticleImageSet],Result.[MetaDecription],Result.[MetaKeywords],Result.[DisplayStyle],Result.[DetailTarget]
		,Result.[ArticleFromRSS],Result.[HasPermissions],Result.[EventArticle],Result.[DetailMediaType],Result.[DetailMediaData],Result.[AuthorAliasName],Result.[ShowGallery],Result.[ArticleGalleryID],Result.[MainImageTitle],Result.[MainImageDescription],
		 Result.StartDate, Result.EndDate,Result.WhloeDay,Result.ShowEndDate,
		 CASE Result.EventArticle
			WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] as md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] as mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			WHEN 0 THEN ''''
		 END AS ''GoogleMapData'',
		 CAST (CASE Result.EventArticle
			WHEN 1 THEN Result.StartDate
			WHEN 0 THEN Result.PublishDate
		 END AS DATETIME ) AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
		 FROM (SELECT n.*, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as n LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] as ne on n.ArticleID = ne.ArticleID WHERE n.ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter as uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved = 1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND na.UserID = @FilterByDNNUserID
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] as aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1  AND ((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND na.UserID = @FilterByDNNUserID
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] as na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] as arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) as t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved = 1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate 
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND na.UserID = @FilterByDNNUserID
			)
		) AS Result ORDER BY CombinedOrderBy;
	END
END' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetAllContent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetAllContent]
	@PortalID INT,
	@UserID INT,
	@CalendarModuleID INT,
	@AdminOrSuperUser BIT  = 0,
	@FromDate DATETIME = NULL, -- articles
	@ToDate DATETIME = NULL,
	@eFromDate DATETIME = NULL, -- events
	@eToDate DATETIME = NULL,
	@DisplayType TINYINT = 0, -- 0 - ByStartDate, 1 - ByPublishDate , 2 - ByStartDateOrPublishDate
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@ShowAllAuthors BIT = 1, -- filter postavka menija
	@CategoryFilterType TINYINT = 0, --0 All categories, 1 - SELECTion, 2 - AutoAdd
	@HideUnlocalizedItems BIT = 0,
	@PermissionSettingsSource TINYINT = 0, -- None, 1 - portal, 2 - module
	@PermissionsModuleID INT = 0 -- NewsModuleID
AS
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
DECLARE @UserCanApprove BIT;
SET @UserCanApprove = 0;
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal

DECLARE @SettingsSource BIT; SET @SettingsSource = 1;
IF @AdminOrSuperUser = 1 OR @PermissionSettingsSource = 0
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL;
			END
		END
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
			END
		END
		ELSE
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID GROUP BY upsc.[CategoryID];
			END
		END
	END
END

IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
	INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
BEGIN
		INSERT INTO @UserViewCategoriesWithFilter 
		SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @CalendarModuleID
		
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID;
END
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	WITH hierarchy AS(
		SELECT [CategoryID], [ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID)) AND PortalID = @PortalID
		UNION ALL
		SELECT c.[CategoryID], c.[ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
		)
		INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
		INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
		END
	END
ELSE
BEGIN
	IF @ShowAllAuthors = 0
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @CalendarModuleID
		UNION 
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @CalendarModuleID
	END
END

IF @IsSocialInstance = 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 1
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1
					AND 1 = CASE WHEN
								(@DisplayType = 0 AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate) OR
								(@DisplayType = 1 AND nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR
								(@DisplayType = 2 AND ((nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)))
							THEN 1
							ELSE 0
							END
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						) 
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))	 
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT *, CASE WHEN EventArticle = 1 THEN StartDate ELSE PublishDate END AS ''CombinedOrderBy'' FROM (
			SELECT Result.*,
			CASE WHEN ne.Recurring = 1 THEN nerd.StartDateTime ELSE ne.StartDate END AS ''StartDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.EndDateTime ELSE ne.EndDate END AS ''EndDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID'',
			ne.WhloeDay,ne.ShowEndDate,
			CASE WHEN Result.EventArticle = 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID) ELSE '''' END
			AS ''GoogleMapData'',
			(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
			AS ''CssCategoryClasses''
			FROM (
				SELECT n.[ArticleID],n.[Title],n.[SubTitle],n.[Summary],n.[ArticleImage],n.[PublishDate],n.[TitleLink],n.[EventArticle]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				UNION ALL
				SELECT n.[ArticleID],fla.[Title],fla.[SubTitle],fla.[Summary],n.[ArticleImage],n.[PublishDate],fla.[TitleLink],n.[EventArticle]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID
			) AS Result
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON Result.ArticleID = ne.ArticleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON (ne.ArticleID = nerd.ArticleID AND ne.ArticleID IS NOT NULL AND ne.Recurring = 1
			 AND 1 = CASE WHEN
						(@DisplayType = 0 AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate) OR
						(@DisplayType = 1 AND nerd.RecurringID = 1 AND Result.PublishDate >= @FromDate AND Result.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((nerd.RecurringID = 1 AND Result.PublishDate >= @FromDate AND Result.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)))
					THEN 1
					ELSE 0
					END
			 )) AS ResultFinal
		 ORDER BY CombinedOrderBy;
	END
	ELSE
	BEGIN
		SELECT
		Result.[ArticleID],Result.[RecurringID],Result.[Title],Result.[SubTitle],Result.[Summary],Result.[ArticleImage],Result.[PublishDate],Result.[TitleLink],Result.[EventArticle],
		Result.StartDate, Result.EndDate,Result.WhloeDay,Result.ShowEndDate,
		CASE WHEN Result.EventArticle = 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID) ELSE '''' END
		AS ''GoogleMapData'',
		CAST (CASE WHEN Result.EventArticle = 1 THEN Result.StartDate ELSE Result.PublishDate END AS DATETIME )
		AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root''))
		AS ''CssCategoryClasses''
		FROM (SELECT n.[ArticleID],n.[Title],n.[SubTitle],n.[Summary],n.[ArticleImage],n.[PublishDate],n.[TitleLink],n.[EventArticle],ne.WhloeDay,ne.ShowEndDate,
			CASE WHEN ne.Recurring = 1 THEN nerd.StartDateTime ELSE ne.StartDate END AS ''StartDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.EndDateTime ELSE ne.EndDate END AS ''EndDate'',
			CASE WHEN ne.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS ''RecurringID''
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on n.ArticleID = ne.ArticleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.ArticleID IS NOT NULL AND ne.Recurring = 1
			 AND 1 = CASE WHEN
						(@DisplayType = 0 AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate) OR
						(@DisplayType = 1 AND nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)))
					THEN 1
					ELSE 0
					END
			WHERE n.ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 1
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1
					AND 1 = CASE WHEN
								(@DisplayType = 0 AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate) OR
								(@DisplayType = 1 AND nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR
								(@DisplayType = 2 AND ((nerd.RecurringID = 1 AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)))
							THEN 1
							ELSE 0
							END
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND ne.Recurring = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))	 
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate) OR
						(@DisplayType = 1 AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				)
		 ) AS Result ORDER BY CombinedOrderBy;	 
	END
END
ELSE IF @FilterBySocialGroup = 1
BEGIN
IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						(@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						(@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
						AND ((@AdminOrSuperUser = 1) OR (
							((@UserCanApprove = 1) OR (na.Approved=1))AND (na.Active=1 OR na.UserID=@UserID)AND arp.Show = 1AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
						AND na.HasPermissions = 1
						AND na.EventArticle = 0  
						AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
						AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
						AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			)
		),
		FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
			SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
		)
		SELECT Result.*,NULL AS ''RecurringID'', ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate,
			CASE Result.EventArticle
				WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
				WHEN 0 THEN ''''
			END AS ''GoogleMapData'',
			CASE Result.EventArticle
				WHEN 1 THEN ne.StartDate
				WHEN 0 THEN Result.PublishDate
			END AS ''CombinedOrderBy'',
			(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
			FROM (
				SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription]
					   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
				UNION ALL
				SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
					  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
					  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
					  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
					  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
					  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID
			) As Result LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on Result.ArticleID = ne.ArticleID ORDER BY CombinedOrderBy;
	END
	ELSE
	BEGIN
		SELECT 
		Result.[ArticleID],NULL AS ''RecurringID'',Result.[UserID],Result.[Title],Result.[SubTitle],Result.[Summary],Result.[Article],Result.[ArticleImage],Result.[DateAdded],Result.[LastModified],Result.[PublishDate]
		,Result.[ExpireDate],Result.[Approved],Result.[Featured],Result.[NumberOfViews],Result.[RatingValue],Result.[RatingCount],Result.[AllowComments],Result.[Active]
		,Result.[TitleLink],Result.[DetailType],Result.[DetailTypeData],Result.[DetailsTemplate],Result.[DetailsTheme],Result.[GalleryPosition],Result.[GalleryDisplayType]
		,Result.[ShowMainImage],Result.[ShowMainImageFront],Result.[CommentsTheme],Result.[ArticleImageFolder],Result.[NumberOfComments]
		,Result.[ArticleImageSet],Result.[MetaDecription],Result.[MetaKeywords],Result.[DisplayStyle],Result.[DetailTarget]
		,Result.[ArticleFromRSS],Result.[HasPermissions],Result.[EventArticle],Result.[DetailMediaType],Result.[DetailMediaData],Result.[AuthorAliasName],Result.[ShowGallery],Result.[ArticleGalleryID],Result.[MainImageTitle],Result.[MainImageDescription],
		Result.StartDate, Result.EndDate,Result.WhloeDay,Result.ShowEndDate,
		CASE Result.EventArticle
			WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			WHEN 0 THEN ''''
		END AS ''GoogleMapData'',
		CAST (CASE Result.EventArticle
			WHEN 1 THEN Result.StartDate
			WHEN 0 THEN Result.PublishDate
		END AS DATETIME ) AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
		FROM (SELECT n.*, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on n.ArticleID = ne.ArticleID WHERE n.ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0		   
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1  		   
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1))AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0 
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1))AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.HideDefaultLocale = 0
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
			)
		) AS Result ORDER BY CombinedOrderBy;
	END
END
ELSE IF @FilterByDNNUserID <> 0
BEGIN
	IF @LocaleCode IS NOT NULL
	BEGIN
		WITH FinalArticleIDsSet (ArticleID) AS(
			SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN(
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1)AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 0		   
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1)AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 0
					AND na.EventArticle = 1		   
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION ALL
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0  
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 0
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				UNION
				SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
					INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
				WHERE na.PortalID=@PortalID
					AND ((@AdminOrSuperUser = 1) OR (
						((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
					AND na.HasPermissions = 1
					AND na.EventArticle = 1
					AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
					AND (
						(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
						(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
						(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
						)
					AND na.UserID = @FilterByDNNUserID
					AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
				)
			),
			FinalLocalizedArticleIDsSet (ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,TitleLink,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription) AS(
				SELECT ArticleID,Title,SubTitle,Summary,Article,DetailTypeData,clTitleLink AS TitleLink ,MetaDecription,MetaKeywords,MainImageTitle,MainImageDescription FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet) AND LocaleCode = @LocaleCode
			)
			SELECT Result.*,NULL AS ''RecurringID'', ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate,
				CASE Result.EventArticle
					WHEN ''True'' THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
					WHEN ''False'' THEN ''''
				END AS ''GoogleMapData'',
				CASE Result.EventArticle
					WHEN ''True'' THEN ne.StartDate
					WHEN ''False'' THEN Result.PublishDate
				END AS ''CombinedOrderBy'',
				(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
				FROM (
					SELECT n.[ArticleID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
						  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
						  ,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
						  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
						  ,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
						  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription]
						   FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n WHERE ArticleID IN (SELECT ArticleID FROM FinalArticleIDsSet WHERE ArticleID NOT IN (SELECT ArticleID FROM FinalLocalizedArticleIDsSet))
					UNION ALL
					SELECT n.[ArticleID],n.[UserID],fla.[Title],fla.[SubTitle],fla.[Summary],fla.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
						  ,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
						  ,fla.[TitleLink],n.[DetailType],fla.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
						  ,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
						  ,n.[ArticleImageSet],fla.[MetaDecription],fla.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
						  ,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],fla.[MainImageTitle],fla.[MainImageDescription]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n INNER JOIN FinalLocalizedArticleIDsSet AS fla ON fla.ArticleID = n.ArticleID
				) As Result LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on Result.ArticleID = ne.ArticleID ORDER BY CombinedOrderBy;
	END
	ELSE
	BEGIN
		SELECT 
		Result.[ArticleID],NULL AS ''RecurringID'',Result.[UserID],Result.[Title],Result.[SubTitle],Result.[Summary],Result.[Article],Result.[ArticleImage],Result.[DateAdded],Result.[LastModified],Result.[PublishDate]
		,Result.[ExpireDate],Result.[Approved],Result.[Featured],Result.[NumberOfViews],Result.[RatingValue],Result.[RatingCount],Result.[AllowComments],Result.[Active]
		,Result.[TitleLink],Result.[DetailType],Result.[DetailTypeData],Result.[DetailsTemplate],Result.[DetailsTheme],Result.[GalleryPosition],Result.[GalleryDisplayType]
		,Result.[ShowMainImage],Result.[ShowMainImageFront],Result.[CommentsTheme],Result.[ArticleImageFolder],Result.[NumberOfComments]
		,Result.[ArticleImageSet],Result.[MetaDecription],Result.[MetaKeywords],Result.[DisplayStyle],Result.[DetailTarget]
		,Result.[ArticleFromRSS],Result.[HasPermissions],Result.[EventArticle],Result.[DetailMediaType],Result.[DetailMediaData],Result.[AuthorAliasName],Result.[ShowGallery],Result.[ArticleGalleryID],Result.[MainImageTitle],Result.[MainImageDescription],
		Result.StartDate, Result.EndDate,Result.WhloeDay,Result.ShowEndDate,
		CASE Result.EventArticle
			WHEN 1 THEN (SELECT PointData FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID WHERE mc.ArticleID =  Result.ArticleID)
			WHEN 0 THEN ''''
		END AS ''GoogleMapData'',
		CAST (CASE Result.EventArticle
			WHEN 1 THEN Result.StartDate
			WHEN 0 THEN Result.PublishDate
		END AS DATETIME ) AS ''CombinedOrderBy'',
		(SELECT c.CategoryID, c.CategoryName FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID WHERE cl.ArticleID = Result.ArticleID ORDER BY c.Position FOR XML AUTO, ROOT(''root'')) AS ''CssCategoryClasses''
		FROM (SELECT n.*, ne.StartDate, ne.EndDate,ne.WhloeDay,ne.ShowEndDate
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on n.ArticleID = ne.ArticleID WHERE n.ArticleID IN(
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0  
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
				AND na.UserID = @FilterByDNNUserID
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1  
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND (
					(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
					(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
					(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
					)
				AND na.UserID = @FilterByDNNUserID
			UNION ALL
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (
					((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0 
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
				AND na.UserID = @FilterByDNNUserID
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (
					((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND (
					(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
					(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
					(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
					)
				AND na.UserID = @FilterByDNNUserID
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (
					((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate
				AND na.UserID = @FilterByDNNUserID
			UNION
			SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (
					((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND na.PublishDate <= @CurrentDate AND na.[ExpireDate] >= @CurrentDate
				AND (
					(@DisplayType = 0 AND (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) OR
					(@DisplayType = 1 AND (na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate)) OR
					(@DisplayType = 2 AND ((na.PublishDate >= @FromDate AND na.PublishDate <= @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)))
					)
				AND na.UserID = @FilterByDNNUserID
			)
		) AS Result ORDER BY CombinedOrderBy;
	END
END' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarArchive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarArchive]
	@PortalID INT,
	@UserID INT,
	@CalendarModuleID INT,
	@AdminOrSuperUser BIT  = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDNNUserID INT = 0, -- filter by some UserID / not current user ID
	@FilterByDNNGroupID INT = 0, -- filter by DNNGroup/RoleID / not profile GroupID
	@ShowAllAuthors BIT = 1, -- filter postavka menija
	@CategoryFilterType TINYINT = 0, --0 All categories, 1 - Selection, 2 - AutoAdd
	@PermissionSettingsSource TINYINT = 0, -- None, 1 - portal, 2 - module
	@PermissionsModuleID INT = 0, -- NewsModuleID
	@HideUnlocalizedItems BIT = 0,
	@DateTimeOffset INT,
	@OnlyArticles BIT = 1,
	@OnlyEvents BIT = 1
AS
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @UserCanApprove BIT;
SET @UserCanApprove = 0;
DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
INSERT INTO @UserInRoles SELECT DISTINCT ur.[RoleID] FROM {databaseOwner}[{objectQualifier}UserRoles] AS ur INNER JOIN {databaseOwner}[{objectQualifier}Roles] AS r ON ur.RoleID = r.RoleID WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > GETUTCDATE()) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < GETUTCDATE());

DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories which user can see based on permissions and Module filter
DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY); -- all categories that are filtred by module or portal

DECLARE @SettingsSource BIT; SET @SettingsSource = 1;
IF @AdminOrSuperUser = 1 OR @PermissionSettingsSource = 0
BEGIN
	INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @UserID = -1
BEGIN	
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL;
			END
		END
		ELSE
		BEGIN
			IF EXISTS (SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL;
			END
		END
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
		BEGIN
			INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
		END
	END
	ELSE -- by module
	BEGIN
		SELECT @SettingsSource = PermissionsPMSource FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID;
		IF @SettingsSource = 1
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL GROUP BY upsc.[CategoryID];
			END
		END
		ELSE
		BEGIN
			IF EXISTS (
				SELECT TOP (1) ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1
				UNION
				SELECT ShowAllCategories FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1
			)
			BEGIN
				INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			END
			ELSE
			BEGIN
				INSERT INTO @UserViewCategories
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN @UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID = @PermissionsModuleID GROUP BY rpsc.[CategoryID]
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID = @PermissionsModuleID GROUP BY upsc.[CategoryID];
			END
		END
	END
END

IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
	INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
END
ELSE IF @CategoryFilterType = 1 -- 1 - Selection
BEGIN
		INSERT INTO @UserViewCategoriesWithFilter 
		SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci ON mci.CategoryID = cl.CategoryID AND mci.ModuleID = @CalendarModuleID
		
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID;
END
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	WITH hierarchy AS(
		SELECT [CategoryID], [ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @CalendarModuleID)) AND PortalID = @PortalID
		UNION ALL
		SELECT c.[CategoryID], c.[ParentCategory]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
		)
		INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
		INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID;
END

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

DECLARE @TempAuthorsIDList TABLE (UserID INT NOT NULL PRIMARY KEY);
IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0
		BEGIN	
			SET @FilterBySocialGroup = 1;
		END
	END
ELSE
BEGIN
	IF @ShowAllAuthors = 0
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @CalendarModuleID
		UNION 
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @CalendarModuleID
	END
END

IF @LocaleCode IS NULL
BEGIN
	IF @IsSocialInstance = 0
	BEGIN
		IF @OnlyArticles = 1 AND @OnlyEvents = 0 -- only articles
		BEGIN
			SELECT MONTH(final.PublishDate) AS [Month], YEAR(final.PublishDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
		) AS final
		GROUP BY MONTH(PublishDate), YEAR(PublishDate) ORDER BY [Year] DESC, [Month] DESC;
		END
		ELSE IF @OnlyEvents = 1 AND @OnlyArticles = 0 -- only events
		BEGIN
			SELECT MONTH(final.StartDate) AS [Month], YEAR(final.StartDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ne.EndDate < @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 1
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ne.EndDate < @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ne.EndDate < @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
		) AS final
		GROUP BY MONTH(StartDate), YEAR(StartDate) ORDER BY [Year] DESC, [Month] DESC
		END
		ELSE -- articles and events
		BEGIN
			SELECT MONTH(final.CombinedDate) AS [Month], YEAR(final.CombinedDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION ALL -- pocinju eventi
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ne.EndDate < @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END	
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 1
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ne.EndDate < @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ne.EndDate < @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])		
		) AS final
		GROUP BY MONTH(CombinedDate), YEAR(CombinedDate) ORDER BY [Year] DESC, [Month] DESC;
		END
	END
	ELSE IF @FilterBySocialGroup = 1
	BEGIN
		SELECT MONTH(final.PublishDate) AS [Month], YEAR(final.PublishDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
					))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
		) AS final
		GROUP BY MONTH(PublishDate), YEAR(PublishDate) ORDER BY [Year] DESC, [Month] DESC
	END
	ELSE IF @FilterByDNNUserID <> 0
	BEGIN
		SELECT MONTH(final.PublishDate) AS [Month], YEAR(final.PublishDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID],DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
					))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
		) AS final
		GROUP BY MONTH(PublishDate), YEAR(PublishDate) ORDER BY [Year] DESC, [Month] DESC
	END
END
ELSE
BEGIN
	IF @IsSocialInstance = 0
	BEGIN
		IF @OnlyArticles = 1 AND @OnlyEvents = 0 -- only articles
		BEGIN
			SELECT MONTH(final.PublishDate) AS [Month], YEAR(final.PublishDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID],DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
		) AS final
		GROUP BY MONTH(PublishDate), YEAR(PublishDate) ORDER BY [Year] DESC, [Month] DESC
		END
		ELSE IF @OnlyEvents = 1 AND @OnlyArticles = 0 -- only events
		BEGIN
			SELECT MONTH(final.StartDate) AS [Month], YEAR(final.StartDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID],DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND ne.EndDate < @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
			UNION ALL
			SELECT na.[ArticleID],DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 1
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ne.Recurring = 0
				AND ne.EndDate < @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [StartDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ne.Recurring = 0
				AND ne.EndDate < @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
		) AS final
		GROUP BY MONTH(StartDate), YEAR(StartDate) ORDER BY [Year] DESC, [Month] DESC
		END
		ELSE -- articles and events
		BEGIN
			SELECT MONTH(final.CombinedDate) AS [Month], YEAR(final.CombinedDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID],DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])		
			UNION ALL
			SELECT na.[ArticleID],DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 0
				AND ne.EndDate < @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
			UNION ALL
			SELECT na.[ArticleID],DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND 1 = CASE WHEN nerd.EndDateTime < @CurrentDate THEN 1 ELSE 0 END
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.EventArticle = 1
				AND ne.Recurring = 1
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, nerd.[StartDateTime])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ne.Recurring = 0
				AND ne.EndDate < @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID)) AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, ne.[StartDate]) AS [CombinedDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.EventArticle = 0
				AND ne.Recurring = 0
				AND ne.EndDate < @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)))
				AND ((@FilterAuthorOrAuthors = 1 AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList)) OR (@FilterAuthorOrAuthors = 0))
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, ne.[StartDate])	
		) AS final
		GROUP BY MONTH(CombinedDate), YEAR(CombinedDate) ORDER BY [Year] DESC, [Month] DESC
		END
	END
	ELSE IF @FilterBySocialGroup = 1
	BEGIN
		SELECT MONTH(final.PublishDate) AS [Month], YEAR(final.PublishDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID],DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
					))
				AND na.HasPermissions = 1
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
				AND na.HasPermissions = 1
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
		) AS final
		GROUP BY MONTH(PublishDate), YEAR(PublishDate) ORDER BY [Year] DESC, [Month] DESC
	END
	ELSE IF @FilterByDNNUserID <> 0
	BEGIN
		SELECT MONTH(final.PublishDate) AS [Month], YEAR(final.PublishDate) AS [Year], COUNT(*) AS [Count] FROM (
			SELECT na.[ArticleID],DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @UserViewCategoriesWithFilter AS uvcwf ON uvcwf.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR ((@UserCanApprove = 1 OR na.Approved=1) AND (na.Active=1 OR na.UserID=@UserID)))
				AND na.HasPermissions = 0
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION ALL
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
					AND aup.Show = 1 AND ((@UserCanApprove = 1) OR (na.Approved=1)) AND (na.Active=1 OR na.UserID=@UserID)
					))
				AND na.HasPermissions = 1
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
			UNION
			SELECT na.[ArticleID], DATEADD(hh, @DateTimeOffset, na.[PublishDate]) AS [PublishDate] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
				INNER JOIN @FiltredByCategories AS fbc ON fbc.CategoryID = cat.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID
			WHERE na.PortalID=@PortalID
				AND ((@AdminOrSuperUser = 1) OR (((@UserCanApprove = 1) OR (na.Approved=1))
					AND (na.Active=1 OR na.UserID=@UserID) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
					))
				AND na.HasPermissions = 1
				AND DATEADD(hh, @DateTimeOffset, na.[PublishDate]) <= @CurrentDate
				AND DATEADD(hh, @DateTimeOffset, na.[ExpireDate]) >= @CurrentDate
				AND na.UserID = @FilterByDNNUserID
				AND ((@HideUnlocalizedItems = 1 AND ncl.ArticleID IS NOT NULL AND ncl.LocaleCode = @LocaleCode) OR (@HideUnlocalizedItems = 0))
			GROUP BY na.ArticleID, DATEADD(hh, @DateTimeOffset, na.[PublishDate])
		) AS final
		GROUP BY MONTH(PublishDate), YEAR(PublishDate) ORDER BY [Year] DESC, [Month] DESC
	END
END
' 
END
GO
