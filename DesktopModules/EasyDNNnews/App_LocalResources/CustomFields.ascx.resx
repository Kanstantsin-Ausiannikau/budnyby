<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="btnCheckToken.Text" xml:space="preserve">
    <value>Check availability</value>
  </data>
  <data name="btnClose.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnCreateDropDownElement.Text" xml:space="preserve">
    <value>Create element</value>
  </data>
  <data name="btnSaveField.Text" xml:space="preserve">
    <value>Create Field</value>
  </data>
  <data name="btnUpdateField.Text" xml:space="preserve">
    <value>Update Field</value>
  </data>
  <data name="gvListOfCustomFieldsAction.HeaderText" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="gvListOfCustomFieldsName.HeaderText" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="gvListOfCustomFieldsToken.HeaderText" xml:space="preserve">
    <value>Token</value>
  </data>
  <data name="gvListOfCustomFieldsType.HeaderText" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="gvMultiControlElementsCustomFieldID.HeaderText" xml:space="preserve">
    <value>cfID</value>
  </data>
  <data name="gvMultiControlElementsFieldElementID.HeaderText" xml:space="preserve">
    <value>feID</value>
  </data>
  <data name="gvMultiControlElementsPosition.HeaderText" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="gvMultiControlElementsText.HeaderText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="infoCurrencyControlLink.Text" xml:space="preserve">
    <value>Please set &lt;a href="{0}"&gt;the base currency&lt;/a&gt; in order to be able to create a money custom field type.</value>
  </data>
  <data name="infolblCheckToken.Text" xml:space="preserve">
    <value>Available</value>
  </data>
  <data name="infolblCheckTokenFalse.Text" xml:space="preserve">
    <value>Not available</value>
  </data>
  <data name="infolblInfoMultiPreSaveCommon.Text" xml:space="preserve">
    <value>Select common items source.</value>
  </data>
  <data name="infolblInfoMultiPreSaveFirstcreate.Text" xml:space="preserve">
    <value>Please first create a custom field in order to be able to create the custom field elements.</value>
  </data>
  <data name="lbgvMultiControlElementsCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="lbgvMultiControlElementsDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="lbgvMultiControlElementsEdit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="lbgvMultiControlElementsUpdate.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="lblBasePortalCurrency.HelpText" xml:space="preserve">
    <value>The base currency for this portal. All other currencies on the portal are calculated from the base currency according to the portal exchange list.</value>
  </data>
  <data name="lblBasePortalCurrency.Text" xml:space="preserve">
    <value>Base currency:</value>
  </data>
  <data name="lblCheckBoxListDefault.HelpText" xml:space="preserve">
    <value>Default value of field.</value>
  </data>
  <data name="lblCheckBoxListDefault.Text" xml:space="preserve">
    <value>Default value:</value>
  </data>
  <data name="lblCreateMultiElementInfoFail1.Text" xml:space="preserve">
    <value>Failed to insert element {0} to database!</value>
  </data>
  <data name="lblCreateMultiElementInfoFail2.Text" xml:space="preserve">
    <value>Can't create empty Dropdown list, Text element or if Text.Lenght &gt; 300</value>
  </data>
  <data name="lblCreateMultiElementInfoFail3.Text" xml:space="preserve">
    <value>Please first save Custom Field then create Elements for that field</value>
  </data>
  <data name="lblCreateMultiElementInfoSuccess.Text" xml:space="preserve">
    <value>Successfuly created element {0}!</value>
  </data>
  <data name="lblCurrencyManager.Text" xml:space="preserve">
    <value>Currency setup</value>
  </data>
  <data name="lblCustomFieldName.HelpText" xml:space="preserve">
    <value>Enter the name for this custom field.</value>
  </data>
  <data name="lblCustomFieldName.Text" xml:space="preserve">
    <value>Custom field name:</value>
  </data>
  <data name="lblCustomFields.Text" xml:space="preserve">
    <value>Add/Edit Custom Fields</value>
  </data>
  <data name="lblCustomFieldsTemplates.Text" xml:space="preserve">
    <value>Manage Custom Fields Groups</value>
  </data>
  <data name="lblDataType.HelpText" xml:space="preserve">
    <value>Select a type of TextBox data.</value>
  </data>
  <data name="lblDataType.Text" xml:space="preserve">
    <value>TextBox data type:</value>
  </data>
  <data name="lblDefaultCheckBox.HelpText" xml:space="preserve">
    <value>Default value of field.</value>
  </data>
  <data name="lblDefaultCheckBox.Text" xml:space="preserve">
    <value>Default value:</value>
  </data>
  <data name="lblDefaultValue.HelpText" xml:space="preserve">
    <value>Default value of feild.</value>
  </data>
  <data name="lblDefaultValue.Text" xml:space="preserve">
    <value>Default value:</value>
  </data>
  <data name="lblDefMulticontrol.Text" xml:space="preserve">
    <value>Custom field elements</value>
  </data>
  <data name="lblDropDownListDefault.HelpText" xml:space="preserve">
    <value>Default value for field.</value>
  </data>
  <data name="lblDropDownListDefault.Text" xml:space="preserve">
    <value>Default value:</value>
  </data>
  <data name="lblFieldType.HelpText" xml:space="preserve">
    <value>Select a type of custom field.</value>
  </data>
  <data name="lblFieldType.Text" xml:space="preserve">
    <value>Field type:</value>
  </data>
  <data name="lblIsHidden.HelpText" xml:space="preserve">
    <value>If the checkbox is checked then this filed is hidden. It is possible to add data in a hidden field when adding an article, but the field is not displayed to readers.</value>
  </data>
  <data name="lblIsHidden.Text" xml:space="preserve">
    <value>Field is hidden:</value>
  </data>
  <data name="lblIsPublished.HelpText" xml:space="preserve">
    <value>If the checkbox is checked then this field is active.</value>
  </data>
  <data name="lblIsPublished.Text" xml:space="preserve">
    <value>Field is active:</value>
  </data>
  <data name="lbListOfCustomFieldsDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="lbListOfCustomFieldsEdit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="lblLabelOfTheFeild.HelpText" xml:space="preserve">
    <value>Enter the text for this label.</value>
  </data>
  <data name="lblLabelOfTheFeild.Text" xml:space="preserve">
    <value>Field label:</value>
  </data>
  <data name="lblLabelVisible.HelpText" xml:space="preserve">
    <value>If the checkbox is checked then the label is displayed.</value>
  </data>
  <data name="lblLabelVisible.Text" xml:space="preserve">
    <value>Show label:</value>
  </data>
  <data name="lblMoneyDefSelect.HelpText" xml:space="preserve">
    <value>This is the currency that you are entering when adding or editing an article. All other currencies are calculated from this currency based on the exchange list.</value>
  </data>
  <data name="lblMoneyDefSelect.Text" xml:space="preserve">
    <value>Main currency:</value>
  </data>
  <data name="lblMultiControlElementText.HelpText" xml:space="preserve">
    <value>Enter element text value.</value>
  </data>
  <data name="lblMultiControlElementText.Text" xml:space="preserve">
    <value>Element:</value>
  </data>
  <data name="lblMultiControlType.HelpText" xml:space="preserve">
    <value>Select a type of multi control.</value>
  </data>
  <data name="lblMultiControlType.Text" xml:space="preserve">
    <value>Multi control type:</value>
  </data>
  <data name="lblRadioButtonListDefault.HelpText" xml:space="preserve">
    <value>Default value of feild.</value>
  </data>
  <data name="lblRadioButtonListDefault.Text" xml:space="preserve">
    <value>Default value:</value>
  </data>
  <data name="lblRequired.HelpText" xml:space="preserve">
    <value>If the checkbox is checked then this custom field is required when adding an article.</value>
  </data>
  <data name="lblRequired.Text" xml:space="preserve">
    <value>Field is required:</value>
  </data>
  <data name="lblRequiredErrorMsg.HelpText" xml:space="preserve">
    <value>Enter the text for the error message if the field is required but not entered.</value>
  </data>
  <data name="lblRequiredErrorMsg.Text" xml:space="preserve">
    <value>Error message:</value>
  </data>
  <data name="lblRichTextBoxDefault.HelpText" xml:space="preserve">
    <value>Default value of feild.</value>
  </data>
  <data name="lblRichTextBoxDefault.Text" xml:space="preserve">
    <value>Default value:</value>
  </data>
  <data name="lblSaveInfoFail1.Text" xml:space="preserve">
    <value>Saving failed! SQL insert method failed.</value>
  </data>
  <data name="lblSaveInfoFail2.Text" xml:space="preserve">
    <value>Saving failed! Token name already exists.</value>
  </data>
  <data name="lblSaveInfoFail3.Text" xml:space="preserve">
    <value>Saving failed! Token not set. Please select Valid Field Type or Name is wrong.</value>
  </data>
  <data name="lblSaveInfoFail4.Text" xml:space="preserve">
    <value>Saving failed! Please select Valid Field Type.</value>
  </data>
  <data name="lblSaveInfoSavedSuccessfuly.Text" xml:space="preserve">
    <value>Saved successfuly!</value>
  </data>
  <data name="lblSaveInfoUpdateSuccessfuly.Text" xml:space="preserve">
    <value>Updated successfuly!</value>
  </data>
  <data name="lblToken.HelpText" xml:space="preserve">
    <value>Token ID is a unique token identifier. It can be used in HTML templates: [EDNcf:TokenID]</value>
  </data>
  <data name="lblToken.Text" xml:space="preserve">
    <value>Token ID:</value>
  </data>
  <data name="liCheckBox.Text" xml:space="preserve">
    <value>CheckBox</value>
  </data>
  <data name="liCheckBoxList.Text" xml:space="preserve">
    <value>CheckBoxList</value>
  </data>
  <data name="liDecimal.Text" xml:space="preserve">
    <value>Decimal</value>
  </data>
  <data name="liDropDownList.Text" xml:space="preserve">
    <value>DropDownList</value>
  </data>
  <data name="liInteger.Text" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="liMoney.Text" xml:space="preserve">
    <value>Money</value>
  </data>
  <data name="liMultiControls.Text" xml:space="preserve">
    <value>MultiControls</value>
  </data>
  <data name="liRadioButtonList.Text" xml:space="preserve">
    <value>RadioButtonList</value>
  </data>
  <data name="liRichText.Text" xml:space="preserve">
    <value>Rich text (HTML)</value>
  </data>
  <data name="liSelect.Text" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="liText.Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="liTextBox.Text" xml:space="preserve">
    <value>TextBox</value>
  </data>
  <data name="rfvCustomFieldName.ErrorMessage" xml:space="preserve">
    <value>Required field!</value>
  </data>
  <data name="tbxLabelHelp.HelpText" xml:space="preserve">
    <value>Enter the text for the tooltip.</value>
  </data>
  <data name="tbxLabelHelp.Text" xml:space="preserve">
    <value>Field tooltip:</value>
  </data>
  <data name="titleControlBasicSetup.Text" xml:space="preserve">
    <value>Control basic setup</value>
  </data>
  <data name="titleControlLabelOptions.Text" xml:space="preserve">
    <value>Control label options</value>
  </data>
  <data name="titleCreateNEWCF.Text" xml:space="preserve">
    <value>Create NEW Custom Field</value>
  </data>
  <data name="titleExistingCF.Text" xml:space="preserve">
    <value>Existing custom fields - ADMINISTRATION</value>
  </data>
  <data name="titleOfControle.Text" xml:space="preserve">
    <value>CUSTOM FIELDS MANAGER</value>
  </data>
  <data name="titleOtherOptions.Text" xml:space="preserve">
    <value>Other options</value>
  </data>
  <data name="titleUpdateCF.Text" xml:space="preserve">
    <value>Update Custom Field</value>
  </data>
  <data name="titleValidation.Text" xml:space="preserve">
    <value>Validation</value>
  </data>
  <data name="lblCustomFieldsList.Text" xml:space="preserve">
    <value>Custom Field List</value>
  </data>
  <data name="btnSaveElementWithParent.Text" xml:space="preserve">
    <value>Create element</value>
  </data>
  <data name="lblCreateChildElement.Text" xml:space="preserve">
    <value>Element:</value>
  </data>
  <data name="lblCreateChildElement.Help" xml:space="preserve">
    <value>Enter the text value for this element.</value>
  </data>
  <data name="lblIsSearchable.Text" xml:space="preserve">
    <value>Field is searchable:</value>
  </data>
  <data name="lblIsSearchable.Help" xml:space="preserve">
    <value>If the checkbox is checked then this field appears in the EasyDNNsearch module when the advanced search option is selected.</value>
  </data>
  <data name="searchableOptions.Text" xml:space="preserve">
    <value>Searchable options</value>
  </data>
  <data name="lblShowAllMultiElements.Text" xml:space="preserve">
    <value>Show all custom field elements:</value>
  </data>
  <data name="lblShowAllMultiElements.Help" xml:space="preserve">
    <value>If the checkbox is checked then the not checked elements are displayed to readers as not checked.</value>
  </data>
  <data name="lblIsParentOrChilde.Text" xml:space="preserve">
    <value>Elements type:</value>
  </data>
  <data name="lblIsParentOrChilde.Help" xml:space="preserve">
    <value>Enter the name for this related element and click on the Create element button. This element will be related to the previously selected custom field element.</value>
  </data>
  <data name="liNormal.Text" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="liTriggeredbyparent.Text" xml:space="preserve">
    <value>Related</value>
  </data>
  <data name="lblParentSelect.Text" xml:space="preserve">
    <value>Parent custom field</value>
  </data>
  <data name="lblParentSelect.HelpText" xml:space="preserve">
    <value>Select a parent custom field to which you want to relate this custom field.</value>
  </data>
  <data name="lblSelectPerentElement.Text" xml:space="preserve">
    <value>Parent custom field element:</value>
  </data>
  <data name="lblSelectPerentElement.HelpText" xml:space="preserve">
    <value>Select an element from the parent custom field to which you want to add a related element.</value>
  </data>
  <data name="lbResetParentCF.Text" xml:space="preserve">
    <value>Reset parent group</value>
  </data>
  <data name="lblSelectLanguage.Text" xml:space="preserve">
    <value>Select language:</value>
  </data>
  <data name="lblSelectLanguage.Help" xml:space="preserve">
    <value>Select language.</value>
  </data>
  <data name="gvActionHeaderText.HeaderText" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="gvLocalizeText.HeaderText" xml:space="preserve">
    <value>Localized text</value>
  </data>
  <data name="gvRelatedHeaderText.HeaderText" xml:space="preserve">
    <value>Parent</value>
  </data>
  <data name="infoNoteChildeToParentChange.Text" xml:space="preserve">
    <value>Note: If you switch from the Related to the Normal type all linked elements will lose their parent value and will be ordered alphabetically. This change will take effect after you update the field.</value>
  </data>
</root>